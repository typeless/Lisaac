
Section Header
  + name := FORME_RECTANGLE;
  
  - author := "HILBERT Jérôme (hilbertjerome@gmail.com), FUHLHABER Simon(simon.fuhlhaber@gmail.com), Jacquemin Grégoire(greg-jacquemin@hotmail.fr)";
  - comment := "prototype qui hérite de fichier, et qui permet en plus d'obtenir les coordonnées du rectangle pour la représentation du diagramme";
  
Section Inherit
  + parent_fichier:FICHIER := FICHIER;
  
Section Private
  
  + x:INTEGER;
  + y:INTEGER;
  + largeur:INTEGER;
  + hauteur:INTEGER;
  
  //ensemble des parents du rectangle courant qui permet de savoir pour placer le rectangle par rapport à ses parents
  + peres:ENS_RECTANGLES;
  //utile pour la gestion des collisions
  + nice_look_left:INTEGER;
  //utile pour la gestion des collisions, permet d'éviter que des traits ne se superpose en contournant le rectangle
  + nice_look_right:INTEGER;
  
Section Public
  
  - make_with_file f:FICHIER <-
  (
    parent_fichier := f;
    peres := ENS_RECTANGLES.create;
    get_attributs.build;
    get_methodes.build;
    hauteur := get_hauteur_max;
    largeur := get_largeur_max;
    nice_look_left := 10;
    nice_look_right := 10;
    
  );
  
  //attributs des coordonnées au rectangles
  - set_coord (xx,yy:INTEGER) <-
  (	
    x := xx;
    y := yy;
  );
  
  //decale le rectangle horizontalement de d
  - decal d:INTEGER <-
  (
    x := x + d;
  );
  
  //ajoute un rectangle dans l'ensemble des parents du rectangles
  - ajout_coord p:SELF <-
  (
    peres.add_last p;
  );
  
  - get_couples :ENS_RECTANGLES <-
  (
    peres
  );
  
  - get_x :INTEGER <-
  (
    x
  );
  
  - get_y :INTEGER <-
  (
    y
  );
  
  - get_largeur :INTEGER <-
  (
    (largeur*7)
  );
  
  - get_hauteur :INTEGER <-
  (
    (hauteur*12)
  );
  
  - get_text_attributs :STRING <-
  (
    get_attributs.get_uml_string
  );
  
  - get_text_methodes :STRING <-
  (
    get_methodes.get_uml_string
  );
  
  //recherche la largeur maximale en fonction du nom, des attributs et des méthodes pour construire le rectangle à la bonne taille
  - get_largeur_max :INTEGER <-
  (
    + size:INTEGER;
    size := get_nom.count*2;
    (size<get_methodes.get_taille_max).if{
      size := get_methodes.get_taille_max;
    };
    (size<get_attributs.get_taille_max).if{
      size := get_attributs.get_taille_max;
    };
    size
  );
  
  //recherche la hauteur maximale en fonction du nombre d'attributs et de methodes
  - get_hauteur_max :INTEGER <-
  (
    + size:INTEGER;
    size := 2;
    size := size + get_attributs.get_nb_lignes + 2;
    size := size + get_methodes.get_nb_lignes + 2;
    size
  );
  
  //renvoit la distance entre le centre du rectangle et le point (a,b)
  - distance (a,b:INTEGER) :INTEGER<-
  (
    + xr,yr:INTEGER;
    
    xr := x + (largeur/2);
    yr := y + (hauteur/2);
    
    ((((a-xr)*(a-xr))+((b-yr)*(b-yr))).sqrt)
  );
  
  - get_left :INTEGER <-
  (
    nice_look_left
  );
  
  - get_right :INTEGER <-
  (
    nice_look_right
  );
  
  //met à jour le décalage à gauche pour éviter la superposition des traits qui contournent le rectangle
  - update_left <-
  (
    (nice_look_left > 2).if{
      nice_look_left := nice_look_left - 2;
    }else{
      nice_look_left := 11;
    };
  );
  
  //met à jour le décalage à droite pour éviter la superposition des traits qui contournent le rectangle
  -update_right <-
  (
    (nice_look_right>2).if{
      nice_look_right := nice_look_right - 2;
    }else{
      nice_look_right := 11;
    };
  );
  