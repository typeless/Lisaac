///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Library                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := DROP_DOWN_MENU;

  - copyright := "Jonathan Ponte, Maxime Audrin, Benoit Sonntag";

  - comment   := "Drop down menu for GUII.";
  
Section Inherit

  - parent_internal_inode:INTERNAL_INODE := INTERNAL_INODE;

Section Public

  - representation:STRING_CONSTANT := "DROP_DOWN_MENU";
  + content:G_EXPR; 				//objet G_EXPR représentant le menu_h
//  + width:REAL_32;				//largeur et hauteur du menu_h
//  + height:REAL_32;

/*
  - make_representation <-
  (
    +name:STRING;
    +under:G_WIN_OUT;
    +under_expr:G_EXPR;
    +expr:G_EXPR;

    //pour chaque fils
    (list.lower).to (list.upper) do {
      i:INTEGER;

      name:=(list.item i).get_name;
      //(list.item i).evaluation(screen_h,screen_w);

      //on instancie chaque fils
      (!(list.item i).get_list.is_empty).if {
        (list.item i).set_representation MENU_V;
        under_expr:=(list.item i).get_content;
        under:=G_WIN_OUT.create(under_expr);
      } else {
	under:=NULL;
      };

      //on crée les boutons qui vont composer le menu_h
      (i=1).if {
        expr:=G_BUTTON.create (G_OUT.create name) connect under.fix_width;
      } else {
        expr:=expr | G_BUTTON.create (G_OUT.create name) connect under.fix_width;
      };
    };
    content:=(G_RAW.create expr).fix_height.fix_width;
    width:=content.width_min;
    height:=content.height_min;
  );
  

*/

  - compute_size_from_prc p:INTEGER <-
  [ ? {! list.is_empty}; ]
  (
	+ expr:G_EXPR;

	list.foreach {
		i:INODE;
		(i.priority > p).if {
			(expr = NULL).if {
				expr:=G_BUTTON.create (G_OUT.create name);
			} else {
				expr:=expr / G_BUTTON.create (G_OUT.create name);
			};
		};
	};
	expr.fix_width.fix_height;
	height:=expr.height_min;
	width:=expr.width_min;
  );

//
// Evaluation.
//

// A drop down menu can be apply only if sons are leafs
  - semantic_evaluation (w,h:REAL_32) :BOOLEAN<-
  (
      browse_group {
        i:INODE;
        (i.operator='^') && {
          i.list.is_empty
        }
    }
  );

- space_evaluation (w,h:REAL_32) :REAL_32<-
  (
    + r,result:REAL_32;

    compute_size_from_prc 0;
    (width > w).if {
      "Priority 0 failed\n".print;
      compute_size_from_prc 25;
      (width > w).if {
        "Priority 25 failed\n".print;
        compute_size_from_prc 50;
        (width > w).if {
          "Priority 50 failed\n".print;
          r:=0;
          set_width 0;
          set_height 0;
        } else {
          r:=get_nitem_from_prc 50;
        };
      } else {
        r:=get_nitem_from_prc 25;
      };
    } else {
      r:=list.count;
    };
     result:=(r/list.count)*100;
     "area := ".print;(get_area_prc (w,h)).print;"\n".print;
     result:=result-(get_area_prc (w,h))/100;
    "result := ".print;result.print;"%\n".print;
    result
  )
  [ ? {Result.in_range 0 to 100}; ];


- evaluate n:INODE width w:REAL_32 height h:REAL_32 : REAL_32<-
  (
    + result:REAL_32;

    // changer le parent de n pour pouvoir utiliser les méthodes spécifiques à MENU_BAR
    n.set_representation DROP_DOWN_MENU;

    // Semantic evaluation && Space evaluation.
    "DROP_DOWN_MENU semantic evaluation of ".print;n.name.print;"\n".print;
    (n.semantic_evaluation (w,h)).if {
      //" OK\n".print;
      "DROP_DOWN_MENU space evaluation of ".print;n.name.print;"\n".print;
      result:=n.space_evaluation (w,h);
    } else {
      // " FAILED\n".print;
       result:=0;
    };
    "DROP_DOWN_MENU result for ".print;n.name.print;"= ".print;result.print;"%\n".print;
    n.set_representation INTERNAL_INODE;
    result
  )
  [ ? {Result.in_range 0 to 100}; ];

