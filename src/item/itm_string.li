////////////////////////////////////////////////////////////////////////////////
//                           Lisaac Compiler                                  //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := ITM_STRING;
  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "String constant";
  
Section Inherit
  
  + parent_itm_code:Expanded ITM_CODE;
  
Section Public
  
  - dico_string:HASHED_DICTIONARY[INTEGER,STRING_CONSTANT] := HASHED_DICTIONARY[INTEGER,STRING_CONSTANT].create;
  
  //
  // Data
  //

  + string:STRING_CONSTANT; 

  //
  // Constructor
  //

  - create p:POSITION text n:STRING_CONSTANT len l:INTEGER :SELF <-
  ( + result:SELF;
    result := clone;
    result.make p text n len l;
    result
  );
  
  - make p:POSITION text n:STRING_CONSTANT len l:INTEGER <-
  (
    position := p;
    dico_string.fast_put l to n;
    string   := n;
  );
  
  //
  // Runnable
  //

  - to_run_expr:EXPR <-
  (     
    STRING_CST.create position text string    
  );





