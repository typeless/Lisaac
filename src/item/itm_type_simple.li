////////////////////////////////////////////////////////////////////////////////
//                           Lisaac Compiler                                  //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := ITM_TYPE_SIMPLE;
  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Simple type";
  
Section Inherit
  
  + parent_itm_type_mono:Expanded ITM_TYPE_MONO;
  
Section ITM_TYPE_SIMPLE, ITM_TYPE_SELF
  
  - dico:HASHED_DICTIONARY[ITM_TYPE_SIMPLE,STRING_CONSTANT] := 
  ( + result:HASHED_DICTIONARY[ITM_TYPE_SIMPLE,STRING_CONSTANT];
    
    result := HASHED_DICTIONARY[ITM_TYPE_SIMPLE,STRING_CONSTANT].create;
    ITM_TYPE_SELF.make;
    result.fast_put ITM_TYPE_SELF to (ALIAS_STR.prototype_self);
    result
  );

Section Private 
  
  - create n:STRING_CONSTANT :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make n;
    result
  );
  
  - make n:STRING_CONSTANT <-
  (
    name := n;
  );
  
Section Public

  - hash_code:INTEGER <- name.hash_code;
  
  + name:STRING_CONSTANT;
  
  - style:STRING_CONSTANT; // NULL
  
  - get n:STRING_CONSTANT :ITM_TYPE_SIMPLE <-
  ( + result:ITM_TYPE_SIMPLE;
  
    result := dico.fast_reference_at n;
    (result = NULL).if {
      result := create n;
      dico.fast_put result to n;
    };
    result
  );
  
  + to_run:TYPE_FULL <-
  (     
    to_run := TYPE.get Self
  );
  
  - display buffer:STRING <-
  (
    buffer.append name;
  );
