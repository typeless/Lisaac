///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := ITM_TYPE_PARAMETER;

  - copyright := "2003-2007 Benoit Sonntag";
  
  - author    := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment   := "Parameter type for argument define.";
  
Section Inherit
  
  + parent_itm_type:Expanded ITM_TYPE_MONO;
  
Section Private
  
  - list_type:FAST_ARRAY[ITM_TYPE_PARAMETER] := 
  ( + result:FAST_ARRAY[ITM_TYPE_PARAMETER];
    
    result := FAST_ARRAY[ITM_TYPE_PARAMETER].create_with_capacity 26;
    'A'.to 'Z' do { c:CHARACTER;
      result.add_last (create c);
    };
    result
  );
  
  - create idf:CHARACTER :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make idf;
    result
  );
  
  - make idf:CHARACTER <-
  (
    string_tmp.clear;
    string_tmp.add_last idf;
    to_run := TYPE_PARAMETER.create (ALIAS_STR.get string_tmp);
  );
    
Section Public
         
  - get idf:CHARACTER :ITM_TYPE_PARAMETER <-
  ( 
    list_type.item (idf -! 'A')
  );
  
  - display buffer:STRING <-
  (
    buffer.append "Generic[";
    buffer.add_last (to_run.parameter_name);    
    buffer.add_last ']';
  );
      
  + to_run:TYPE_FULL;
        
  //
  // Cast.
  //
  
  - append_cast_name_in buf:STRING <- 
  (
    crash_with_message "ITM_TYPE_PARAMETER.append_cast_name_in";
  );
  
