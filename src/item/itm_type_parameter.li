///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := ITM_TYPE_PARAMETER;

  - copyright := "2003-2007 Benoit Sonntag";
  
  - author    := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment   := "Parameter type for argument define.";
 
Section Inherit
  
  + parent_itm_type:Expanded ITM_TYPE_SIMPLE;
  
Section Public
  
  - get n:STRING_CONSTANT :ITM_TYPE_SIMPLE <-
  ( 
    string_tmp.clear;
    string_tmp.add_last '[';
    string_tmp.append n;
    string_tmp.add_last ']';
    parent_itm_type.get (ALIAS_STR.get string_tmp)
  );
  
  - to_run_for p:PARAMETER_TO_TYPE :TYPE_FULL <-
  ( 
    p.parameter_to_type Self
  );
  
