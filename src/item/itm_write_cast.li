////////////////////////////////////////////////////////////////////////////////
//                           Lisaac Compiler                                  //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := ITM_WRITE_CAST;
  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Assignment slot `?=' style";
  
Section Inherit
  
  + parent_itm_write:Expanded ITM_WRITE;
  
Section Public

  //
  // Runnable 
  //

  - to_run_expr:EXPR <-
  ( + val:EXPR;
    + loc:LOCAL;
    + node:NODE; 
    + nm:STRING_CONSTANT;
    + typ_cast:TYPE_FULL;
    + slot:SLOT;
    
    // Value -> local.
    val := value.to_run_expr;
    loc := val.static_type.get_temporary position;    
    list_current.add_last (loc.write position value val);
    val := loc.read position;
    // Assign.
    nm  := get_simple_name;
    loc := lookup nm;
    (loc != NULL).if {
      typ_cast := loc.type;
    } else {
      slot := ITM_TYPE_SELF.to_run.get_slot nm; 
      (slot = NULL).if {
	string_tmp.copy "Slot `";
	string_tmp.append nm;
	string_tmp.append "' not found in static type ";
	ITM_TYPE_SELF.to_run.append_name_in string_tmp;
	string_tmp.add_last '.';
	semantic_error (position,string_tmp);
      };
      typ_cast := slot.get_type_result;
    };
    (verify).if {
      (typ_cast.affect_with (val.static_type)).if {
	warning_error (position,"`?=' is not necessary, use `:='.");
      };
    };
    // Dispatch case.
    node := NODE.new_cast position type typ_cast with val;
    list_current.add_last node;    
    // Assignment result.
    affect nm with (node.result_expr);
    // Value result.
    assign.to_run_expr
  );


