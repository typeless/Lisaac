////////////////////////////////////////////////////////////////////////////////
//                           Lisaac Compiler                                  //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := EXPR_MOD;
  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Add Binary Expression.";
  
Section Inherit
  
  + parent_expr_binary:Expanded EXPR_BINARY;
  
Section Private  
  
  + symbol:STRING_CONSTANT := "%";
  
  //
  // Execute.
  //
    
  - exec_conservator_right right_cst:INTEGER_CST :EXPR <-
  //-- E %   0 -> Error
  //-- E % 2^n -> E & (2^n -1)
  ( + result:EXPR;
    
    (right_cst.value = 0).if {
      warning_error (position,"Division by zero.");
    }.elseif {right_cst.to_power != -1} then {
      right_cst.set_value (right_cst.value - 1);
      result := EXPR_AND.create position with left and right_cst;
    };
    result
  );
  
  - exec left_cst:INTEGER_CST and right_cst:INTEGER_CST :EXPR <- 
  //-- C1 % C2 -> C3
  (
    left_cst.set_value (left_cst.value % right_cst.value); 
    right_cst.remove;
    left_cst
  );
  
  - exec:EXPR <-
  //-- E % E -> 0
  ( + result:EXPR;
    
    (left == right).if {
      result := INTEGER_CST.create position value 0 type static_type;
      left.remove;
      right.remove;
    };
    result    
  );

  - exec_left  left_cst :INTEGER_CST :EXPR <-
  //-- 0 % E -> 0
  ( + result:EXPR;
    
    (left_cst.value = 0).if {
      result := left_cst;
      right.remove;
    };
    result
  );

  - exec_right right_cst:INTEGER_CST :EXPR <-   
  //-- E %   1 -> 0
  //-- E %  -1 -> 0
  ( + result:EXPR;
    
    (right_cst.value = 1).if {
      right_cst.set_value 0;
      left.remove;
      result := right_cst;
    }.elseif {right_cst.value = -1} then {      
      right_cst.set_value 0;
      result := right_cst;
      left.remove;
    };
    result    
  );
  
  
  









