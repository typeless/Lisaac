////////////////////////////////////////////////////////////////////////////////
//                           Lisaac Compiler                                  //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := EXPR_NEG;

  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Negatif unary arithmetic expression.";
  
Section Inherit
  
  + parent_expr_unary:Expanded EXPR_UNARY;
  
Section Private  
  
  - symbol:CHARACTER <- '-';
    
  //
  // Execute.
  //
  
  - exec_conservator:EXPR <-
  //-- - - E -> E 
  ( + sub:EXPR_NEG;
    + result:EXPR;
    
    sub ?= right;
    (sub != NULL).if {
      result := sub.right;
    };
    result
  );
  
  - exec_right right_cst:INTEGER_CST :EXPR <-
  //-- - C1 -> C2
  ( + result:EXPR;
    (right_cst.is_signed).if {
      right_cst.set_value (- right_cst.value);    
      result := right_cst;
    };
    result
  );
    



