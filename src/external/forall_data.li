///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := FORALL_DATA;

  - copyright := "2003-2009 Sonntag Benoit";

  - author    := "Sonntag Benoit (sonntag@icps.u-strasbg.fr)";
  - comment   := "The main prototype";

Section Inherit

  + parent_instr:Expanded INSTR;
  
Section Public
    
  + action:ITM_BLOCK;
  
  + list_data:FAST_ARRAY(COUPLE(SLOT_DATA,LIST));
  
  //
  // Creation.
  //

  - create t:TYPE_FULL action ac:ITM_BLOCK :SELF <-
  ( + result:SELF;
    result := clone;
    result.make t action ac;
    result
  );

  - make t:TYPE_FULL action ac:ITM_BLOCK <-
  ( 
    type   := t;
    action := ac;
    list_data := HASHED_DICTIONARY(LIST,SLOT_DATA).create;    
    list.add_last Self;
  );
  
  //
  //
  //
  
  - my_copy:SELF <-
  (
    
  );
  
  //
  // Depend. 
  //
  
  - depend
  
  //
  // Execute.
  //
  
  - execute:INSTR <- 
  (
    
  );
  
  //
  // Genere.
  //
  
  - genere buffer:STRING <-
  (
    (list_data.lower).to (list_data.upper) do { i:INTEGER;
      list_data.item i.second.genere buffer;
    };
  );
  
  //
  // Display.
  //
  
  - display buffer:STRING <-
  (
    
  );
  