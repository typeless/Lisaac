////////////////////////////////////////////////////////////////////////////////
//                           Lisaac Compiler                                  //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := SIZE_OF;
    
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Size of object";
  
Section Inherit
  
  + parent_expr:Expanded EXPR;
  
Section Public 
  
  - is_invariant:BOOLEAN <- TRUE;  
  
  + receiver:EXPR;
    
  - static_type:TYPE_FULL <- type_integer.default;
  
  - get_type t:TYPES_TMP <-
  (     
    t.add type_integer;
  );
  
  //
  // Creation.
  //
  
  - create p:POSITION receiver e:EXPR :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make p receiver e;
    result
  );
  
  - make p:POSITION receiver e:EXPR <-
  (
    position := p;            
    receiver := e; 
  );
  
  - my_copy:SELF <- SELF.create position receiver (receiver.my_copy);
  
  //
  // Remove
  //
  
  - remove <-
  (
    receiver.remove;
  );
  
  //
  // Execute
  //
  
  - execute_unlink:INSTR <-
  (     
    receiver.execute_unlink
  );
  
  - execute_link:EXPR <-
  (   
    receiver := receiver.execute_link;
    Self
  );
    
  //
  // Genere.
  //
  
  - genere buffer:STRING <-
  ( + t:TYPE_FULL;
    buffer.append "sizeof(";
    t := receiver.static_type;
    t.raw.put_expanded_declaration buffer;
    buffer.add_last ')';    
  );
  
  //
  // Display.
  //
  
  - display buffer:STRING <-
  (
    buffer.append "size_of(";
    receiver.display buffer;
    buffer.add_last ')';
  );









