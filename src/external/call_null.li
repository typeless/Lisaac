///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header

  + name        := CALL_NULL;

  - copyright   := "2003-2007 Benoit Sonntag";


  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Call on NULL";

Section Inherit

  + parent_instr:Expanded INSTR;

Section Private

  - warned_list :FAST_ARRAY(POSITION) <-
  (
    warned_list := FAST_ARRAY(POSITION).create_with_capacity 8
  );

  - warned :BOOLEAN <- warned_list.fast_has position;

Section Public

  - my_copy:SELF <- Self;

  - is_necessary:BOOLEAN;

  - create p:POSITION :SELF <-
  ( + result :SELF;
    is_warn_null.if {
      result := clone;
      result.set_position p;
    } else {
      result := SELF;
    };
    result
  );

  //
  // Remove
  //

  - remove; // Nothing.

  //
  // Execute
  //

  - execute:INSTR <- Self;

  //
  // Genere.
  //

  - genere buffer:STRING <-
  ( + code:STRING_CONSTANT;
    (debug_level_option != 0).if {
      code :=
      "lisaac_stack_print(top_context); \
      \print_string(\"Call on NULL\\n\"); \
      \die_with_code(1)";
    } else {
      code :=
      "print_string(\"Call on NULL\\n\
      \(Use `-D' option)\\n\"); \
      \die_with_code(1)";
    };
    buffer.append code;
    is_necessary := TRUE;
    ((is_warn_null) && {! warned}).if {
      warning_error (position, "Possible call on NULL");
      warned_list.add_last position;
    };
  );

  //
  // Display.
  //

  - display buffer:STRING <-
  (
    buffer.append "Call on NULL";
  );









