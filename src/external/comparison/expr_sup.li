////////////////////////////////////////////////////////////////////////////////
//                           Lisaac Compiler                                  //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := EXPR_SUP;
  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Superior binary comparison expression.";
  
Section Inherit
  
  + parent_expr_binary_cmp:Expanded EXPR_BINARY_CMP;
  
Section Public  
  
  - symbol:STRING_CONSTANT := ">";
  
  //
  // Execute.
  //
  
  - exec left_cst:INTEGER_CST and right_cst:INTEGER_CST :EXPR <- 
  //-- C1 > C2 -> TRUE/FALSE
  ( + result:PROTOTYPE_CST;
    
    (left_cst.value > right_cst.value).if {
      result := PROTOTYPE_CST.create position type (type_true.default);
    } else {
      result := PROTOTYPE_CST.create position type (type_false.default);
    };    
    left_cst .remove;
    right_cst.remove;
    
    result
  );
  
  - exec:EXPR <-  
  //-- E > E -> FALSE
  ( + result:PROTOTYPE_CST;
    
    (left == right).if {
      result := PROTOTYPE_CST.create position type (type_false.default);
      left .remove;
      right.remove;
    };    
    
    result
  );
  
