///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name    := TYPE_LINK;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author  := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment := "TYPE_PARAMETER <-> TYPE_FULL";
  
Section Inherit
  
  - parent_object:OBJECT := OBJECT;
  
Section Private
  
  - create t:TYPE_FULL :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make t;
    result
  );
  
  - make t:TYPE_FULL <-
  (
    type_self := t;
  );
  
Section Public
  
  + type_self:TYPE_FULL;
  
  - create_self s:EXPR :TYPE_LINK <-
  ( + t:TYPE_FULL;
    + tg:TYPE_GENERIC;
    + result:TYPE_LINK;
    + n:INTEGER;
        
    t := s.static_type;
    tg ?= t;
    (tg != NULL).if {    
      n := tg.generic_list.count;
      (n = 1).if {
	result := TYPE_LINK_1.create t and 
	(tg.prototype.idf_generic_list.first,tg.generic_list.first);
      }.elseif {n = 2} then {
	result := TYPE_LINK_2.create t and 
	(tg.prototype.idf_generic_list.first ,tg.generic_list.first) and
	(tg.prototype.idf_generic_list.second,tg.generic_list.second);
      } else {
	result := TYPE_LINK_N.create t and 
	(tg.prototype.idf_generic_list,tg);
      };
    } else {
      result := create t;
    };
    result
  );
  
  - create_for slot:SLOT self s:EXPR with larg:FAST_ARRAY[EXPR] :TYPE_LINK <-
  ( + t:TYPE_FULL;
    + tg:TYPE_GENERIC;
    + result:TYPE_LINK;
    + n:INTEGER;
    
    t := s.static_type;
    tg ?= t;
    (tg != NULL).if {
      n := tg.generic_list.count;
    };
    (larg != NULL).if {
    (larg.lower).to (larg.upper) do { j:INTEGER;
      
    };
  );
  
  //
  // Service.
  //
  
  - install <-
  (
    ITM_TYPE_SELF.set_define type_self;
  );
  
  - clean <- 
  (
    ITM_TYPE_SELF.set_define TYPE_NULL;
  );
  