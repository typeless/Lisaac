////////////////////////////////////////////////////////////////////////////////
//                           Lisaac Compiler                                  //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name    := READ_LOCAL;
  
  - author  := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment := "Read for local.";
  
Section Inherit
  
  + parent_read:Expanded READ;
    
Section Public
  
  - is_invariant:BOOLEAN <- local.is_invariant;  
  
  + local:LOCAL;
  
  - variable:VARIABLE <- local;
  
  //
  // Comparison.
  //
  
  - '==' Right 60 other:EXPR :BOOLEAN <- 
  ( + rd:READ_LOCAL;
    
    rd ?= other;
    ((rd != NULL) && {local = rd.local})    
  );
    
  //
  // Creation.
  //
    
  - create p:POSITION with l:LOCAL :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make p with l;
    result    
  );
  
  - make p:POSITION with l:LOCAL <-
  (
    position := p;
    local    := l;       
  );
  
  //
  // Execute
  //
  
  - execute_access_unlink:INSTR <- NULL;
  
  - execute_access_link;
  
  //
  // Genere
  //
  
  - genere buffer:STRING <-
  ( + tb:PROFIL_BLOCK;
    (variable.ensure_count = -1).if {
      buffer.add_last '*';
    };
    buffer.append (variable.intern_name);     
    //
    tb ?= local.type.raw;
    (tb != NULL).if {
      add_var_size local;
    };
  );
  









