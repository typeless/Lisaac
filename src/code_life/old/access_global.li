////////////////////////////////////////////////////////////////////////////////
//                           Lisaac Compiler                                  //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := ACCESS_GLOBAL;
  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Access R/W for global slot.";
  
Section Inherit
  
  + parent_access:Expanded ACCESS;
  
Section Public

  + slot:SLOT_DATA;

  - variable:VARIABLE <- slot;

  - set_slot v:SLOT_DATA <-
  (
    slot := v;
  );

  //
  // Creation.
  //
  
  - create v:SLOT_DATA :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make v;
    result
  );
  
  - make v:SLOT_DATA <-
  (
    slot := v;
  );
  
  //
  // Execute
  //
  
  - execute_access_unlink:INSTR <- 
  (
    (slot.value != NULL).if {
      slot.execute;
    };
    NULL
  );

  - execute_access_link <- 
  (
    (slot.value != NULL).if {
      slot.execute;
    };    
  );
  
  