///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name    := DTA_RD;

  - copyright   := "2003-2007 Benoit Sonntag";

  
  - author  := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment := "Read site";
    
Section Inherit
  
  + parent_dta:Expanded DTA;
  
Section Public
  
  + generic:TYPE;
  
  + self:TYPE_FULL;
  
  + parameter:FAST_ARRAY[TYPE_FULL];
  
  - set_generic g:TYPE <-
  (
    generic := g;
  );
  
  - set_self s:TYPE_FULL <-
  (
    self := s;
  );
  
  //
  // Creation.
  //
  
  - create p:POSITION call sl:SLOT self arg:EXPR :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make p call sl self arg;        
    result
  );
  
  - make p:POSITION call sl:SLOT self arg:EXPR <-
  ( ? {sl != NULL};    
    position    := p;              
    slot        := sl;
    self_arg    := arg;    
    result_expr := sl.get_expr_result;
    self        := arg.static_type;    
  );
  
  //
  //
  //
  
  - display buffer:STRING <-
  (
    buffer.append "DTA_READ";
  );
