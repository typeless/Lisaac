any.li:  - type_block            :TYPE;
lisaac.li:    type_block     := ITM_TYPE_SIMPLE.get (ALIAS_STR.prototype_block).to_run_for NULL.raw;        
parser.li:            (object.name != ALIAS_STR.prototype_block) || 
parser.li:	      (object.name = ALIAS_STR.prototype_block) && 
profil_block.li:  + to_type_block:TYPE_BLOCK;
profil_block.li:    to_type_block  := TYPE_BLOCK.get_direct a_list and_result r_list;
profil_block.li:    type_block.set_late_binding;
profil_block.li:    other = to_type_block
profil_block.li:  - prototype:PROTOTYPE <- type_block.prototype;
profil_block.li:  - subtype_list:HASHED_SET[TYPE] <- type_block.subtype_list;
profil_block.li:  - add_subtype t:TYPE <- type_block.add_subtype t;
profil_block.li:    type_block.get_slot n
profil_block.li:    type_block.get_local_slot n
profil_block.li:    type_block.get_path_slot n
external/comparison/expr_binary_cmp.li:    ((left.static_type.raw = TYPE_NULL) && {right.static_type.raw = type_block}).if {
external/comparison/expr_binary_cmp.li:      (left.static_type.raw = type_block).if {
external/comparison/expr_binary_cmp.li:    ((right.static_type.raw = TYPE_NULL) && {left.static_type.raw = type_block}).if {
external/comparison/expr_binary_cmp.li:      (right.static_type.raw = type_block).if {
tools/alias_str.li:  - prototype_block           :STRING_CONSTANT := "BLOCK";
tools/alias_str.li:    list.add prototype_block;
type/type_block.li:  - prototype:PROTOTYPE <- type_block.prototype;
type/type_block.li:    type_block.get_slot n
type/type_block.li:    type_block.get_local_slot n
type/type_block.li:    type_block.get_path_slot n
type/type.li:	  (Self = type_block).if {
type/type.li:    (Self != type_block).if {
type/type.li:    (Self = type_block).if {
type/type.li:    }.elseif {t = type_block} then {
variable/slot_data.li:      result := type_block;
variable/variable.li:	      {typ = type_block}
dispatcher/node.li:      block_model := pb.to_type_block;      
code_life/switch.li:      ((expr.static_type.raw = type_block) && {typ_first = TYPE_NULL}).if {
code_life/write_global.li:    ((value.static_type.raw = TYPE_NULL) && {variable.type.raw = type_block}).if {
code_life/write_local.li:    ((value.static_type.raw = TYPE_NULL) && {variable.type.raw = type_block}).if {
code_life/write_slot.li:    ((value.static_type.raw = TYPE_NULL) && {variable.type.raw = type_block}).if {
