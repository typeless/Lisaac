///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := ALIASER_LOCAL;

  - copyright := "2003-2009 Sonntag Benoit";

  - author    := "Sonntag Benoit (sonntag@icps.u-strasbg.fr)";
  - comment   := "The main prototype";

Section Inherit

  - parent_any:ANY := ANY;
  
Section Private
  
  - free:FAST_ARRAY(LOCAL) := FAST_ARRAY(LOCAL).create_with_capacity 128;
    
Section Public
  
  - reset <-
  (
    free.clear;
  );
  
  - write wr:WRITE_LOCAL :STRING_CONSTANT <-
  ( + tab:FAST_ARRAY(LOCAL);    
    + t:TYPE_FULL;
    + loc,loc2:LOCAL;
    + j:INTEGER;
    
    loc  := wr.local;
    loc2 := loc.my_alias;
    (loc2 = NULL).if {
      j := free.lower;
      {(j <= free.upper) && {free.item j.type != loc.type}}.while_do {
        j := j + 1;
      };
      (j > free.upper).if {        
        t := loc.type;
        tab := var_size.item (loc.type.size);
        tab.add_last loc;
        loc2 := loc;        
      } else {
        loc2 := free.item j;
        free.remove j;
      };
      loc.set_list_level current_list_level;
      loc.set_my_alias loc2;
    };
    loc2.intern_name
  );

  - read rd:READ_LOCAL :STRING_CONSTANT <-
  ( + loc,loc2:LOCAL;
    + result:STRING_CONSTANT;
    
    loc := rd.local;
    loc2 := loc.my_alias;
    (loc2 = NULL).if {
      result := loc.intern_name;
    } else {      
      loc.unread rd;    
      ((loc.ensure_count = 0) && {current_list_level <= loc.list_level}).if {
        free.add_last loc2;
      };
      result := loc2.intern_name;
    };
    result
  );
  