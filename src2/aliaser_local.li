///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := ALIASER_LOCAL;

  - copyright := "2003-2009 Sonntag Benoit";

  - author    := "Sonntag Benoit (sonntag@icps.u-strasbg.fr)";
  - comment   := "The main prototype";

Section Inherit

  - parent_any:ANY := ANY;
  
Section Private
  
  - free:FAST_ARRAY(LOCAL) := FAST_ARRAY(LOCAL).create_with_capacity 128;
  
  - free_context:FAST_ARRAY(LOCAL) := FAST_ARRAY(LOCAL).create_with_capacity 64;
    
Section Public
  
  - is_on:BOOLEAN := TRUE;
  
  - reset <-
  (
    free.clear;
    free_context.clear;
    current_list_level := 0;
  );
  
  - write wr:WRITE_LOCAL :STRING_CONSTANT <-
  ( + tab:FAST_ARRAY(LOCAL);    
    + t:TYPE_FULL;
    + loc,loc2:LOCAL;
    + j:INTEGER;
    + result:STRING_CONSTANT;
    
    loc  := wr.local;
    (is_on).if {      
      loc2 := loc.my_alias;
      (loc2 = NULL).if {
        j := free.lower;
        {(j <= free.upper) && {free.item j.type != loc.type}}.while_do {
          j := j + 1;
        };
        (j > free.upper).if {        
          t := loc.type;
          tab := var_size.item (loc.type.size);
          j := tab.lower;    
          {(j <= tab.upper) && {tab.item j.type != t}}.while_do {
            j := j + 1;
          };
          (j > tab.upper).if {
            tab.add_last loc;
          } else {          
            tab.add loc to j;	
          };
          loc2 := loc;        
        } else {
          loc2 := free.item j;
          free.remove j;
          /*
          loc.intern_name.print; " -> ".print;
          loc2.intern_name.print; '\n'.print;
          */
        };
        loc.set_list_level current_list_level;
        loc.set_my_alias loc2;
      };
      result := loc2.intern_name;
    } else {
      add_var_size loc;
      result := loc.intern_name;
    };
    result
  );

  - read rd:READ_LOCAL :STRING_CONSTANT <-
  ( + loc,loc2:LOCAL;
    + result:STRING_CONSTANT;
    
    loc := rd.local;
    loc2 := loc.my_alias;
    loc.unread rd;        
    ((loc2 = NULL) || {! is_on}).if {
      result := loc.intern_name;
    } else {                  
      ((loc.ensure_count = 0) && {current_list_level <= loc.list_level}).if {
        free.add_last loc2;        
      };
      result := loc2.intern_name;
    };
    result
  );
  
  - push p:PUSH :STRING_CONSTANT <-
  ( + tab:FAST_ARRAY(LOCAL);    
    + t:TYPE_FULL;
    + loc,loc2:LOCAL;
    + j:INTEGER;
    + result:STRING_CONSTANT;
    
    loc  := p.context;
    (is_on).if {      
      (loc.my_alias = NULL).if {  // BSBS: .is_first devrait marcher => pb!!!
        j := free_context.lower;
        {
          (j <= free_context.upper) && 
          {free_context.item j.list_level <= current_list_level}
        }.while_do {
          j := j + 1;
        };
        (j > free_context.upper).if {        
          t := loc.type;
          tab := var_size.item (loc.type.size);
          j := tab.lower;    
          {(j <= tab.upper) && {tab.item j.type != t}}.while_do {
            j := j + 1;
          };
          (j > tab.upper).if {
            tab.add_last loc;
          } else {          
            tab.add loc to j;	
          };
          loc2 := loc;        
          free_context.add_last loc;          
        } else {
          loc2 := free_context.item j;                    
        };
        loc2.set_list_level current_list_level;
        loc.set_my_alias loc2;
      };
      result := loc.my_alias.intern_name;
    } else {
      //(p.is_first).if {  // BSBS: SUPER LOUCHE !
        add_var_size loc;
      //};
      result := loc.intern_name;
    };
    result
  );
  
Section ALIASER_LOCAL, READ_LOCAL
  
  - add_var_size v:LOCAL <-
  ( + tab:FAST_ARRAY(LOCAL);
    + j:INTEGER;
    + t:TYPE_FULL;
    
    ? {v.style = '+'};
    
    (v.style != '+').if {
      v.intern_name.print; " style [".print; v.style.print; "] ".print;
      '\n'.print;
      warning_error (v.position,"BUG ANY.add_var_size Error");
    };
    // BSBS: C'est pas top, avec des HASHED_SET ce serait mieux...
    t := v.type;
    tab := var_size.item (v.type.size);
    j := tab.lower;    
    {(j <= tab.upper) && {tab.item j.type != t}}.while_do {
      j := j + 1;
    };
    (j > tab.upper).if {
      tab.add_last v;
    } else {
      {(j <= tab.upper) && {tab.item j != v} && {tab.item j.type = t}}.while_do {
	j := j + 1;
      };
      ((j > tab.upper) || {tab.item j != v}).if {
	tab.add v to j;	
      };
    };
  );
