///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := LOCAL_USE;

  - copyright := "2003-2009 Sonntag Benoit";

  - author    := "Sonntag Benoit (sonntag@icps.u-strasbg.fr)";
  - comment   := "The main prototype";

Section Inherit

  - parent_any:ANY := ANY;
  
Section Private
  
  - free:FAST_ARRAY[LOCAL_USE] := FAST_ARRAY[LOCAL_USE].create_with_capacity 128;
  
  - list:FAST_ARRAY[LOCAL_USE] := FAST_ARRAY[LOCAL_USE].create_with_capacity 128;
  
  + local:LOCAL;
  
  + level:INTEGER;
  
  - is_free:BOOLEAN <-
  (
    
  );
  
  - set_local loc:LOCAL <-
  (
    local := loc;
    level := current_list_level;
  );
  
Section Public
  
  - write loc:LOCAL :STRING_CONSTANT <-
  // True, if alias found.
  [ -? {loc.my_alias = NULL}; ]
  ( + tab:FAST_ARRAY(LOCAL);    
    + t:TYPE_FULL;
    

    (v.my_alias = NULL).if {
      (ALIASER_LOCAL.new_alias v).if_false {              
        t := v.type;
        tab := var_size.item (v.type.size);
        tab.add_last v;
      };
    };
    v.my_alias.intern_name
    
    + elt:LOCAL_USE;
    (free.is_empty).if {
      elt := clone;
    } else {
      elt := free.last;
      free.remove_last;
    };
    elt.set_local loc;
    list.add_last elt;
  )
  [ -? {loc.my_alias != NULL}; ];

  - read loc:LOCAL :STRING_CONSTANT <-
