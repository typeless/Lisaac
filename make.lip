///////////////////////////////////////////////////////////////////////////////
//                            Lisaac Installer                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////  

// file LIP : LIsaac Path directory and make LIsaac Project system.

Section Private
  
  //
  // Compiler variables.
  //
  
  // File information.
  + lisaac:STRING;      // is environment variable value (auto-loading).
  + input_file:STRING;  // is input file name value without extension (auto-loading, if possible).
  + output_file:STRING;
    
  // Debug information.
  + debug_level:INTEGER := 15;
  + debug_with_code:BOOLEAN := TRUE; 
  + is_all_warning:BOOLEAN;
    
  // Optimization.
  + is_optimization:BOOLEAN;
  + inline_level:INTEGER := 15;
  
  // Generate code.
  + is_java:BOOLEAN;
  + is_cop:BOOLEAN; // Correct value after compilation.
  + execute_back_end:BOOLEAN := TRUE;
  
  // Other.
  + is_statistic:BOOLEAN;
  + is_quiet:BOOLEAN;
  
  //
  // Other variables.
  //
  
  + option_gcc:STRING;  
  + lib_gcc:STRING;
  
  + target:STRING := "unix";
  
  //
  // Directory.
  //
  
  - standard_path <-
  // Standard library.
  ( 
    //LIP.create "lib/make.lip".init;
    path ("lib/*");    
  );
  
  //
  // Target path.
  //
  
  - unix_target <-
  (
    path ("lib_os/unix/system/");
    path ("lib_os/unix/file_system/");
    path ("lib_os/unix/video/");
  );
  
  - windows_target <-
  (
    path ("lib_os/unix/system/");
    path ("lib_os/windows/file_system/");
    path ("lib_os/unix/file_system/");  // BSBS: ??
    path ("lib_os/windows/video/");
  );

  - dos_target <-
  (
    path ("lib_os/unix/system/");
    path ("lib_os/unix/file_system/"); // BSBS: ??
    path ("lib_os/dos/file_system/");
    path ("lib_os/dos/video/");
  );
  
  - java_target <-
  (
    path ("lib_os/java/system/");
    path ("lib_os/java/file_system/");
  );
  
  - get_target <-
  (
    (target = "dos").if {
      (is_cop).if {
        "Warning: COP not yet implemented\n".print;
      };
      dos_target;
    };
    (target = "windows").if {
      (is_cop).if {
        "Warning: COP not yet implemented\n".print;
      };
      windows_target;
    };
    (target = "unix").if {
      unix_target;
    };
    (target = "java").if {
      (is_cop).if {
        "Warning: COP not yet implemented\n".print;
      };
      java_target;
    };
    (target = "").if {
      "Target code needed.\n".print;
      exit;
    };
  );
    
  - add_lib lib:STRING <-
  (
    (target = "windows").if {
      run "echo int main(){ return(1); } > __tmp__.c";    
      (run ("gcc __tmp__.c -o __tmp__ " + lib + " > NUL") = 0).if {
        lib_gcc := lib_gcc + " " + lib;
        run "del __tmp__.c __tmp__.exe";
      } else {
        "\nERROR: `" + lib + "' library for GCC not found.\n".print;
        run "del __tmp__.c";
        exit;
      };    
    } else {
      run "echo \"int main(){ return(1); }\" > __tmp__.c";    
      (run ("gcc __tmp__.c -o __tmp__ " + lib + " 2> /dev/null") = 0).if {
        lib_gcc := lib_gcc + " " + lib;
        run "rm __tmp__.c __tmp__";
      } else {
        ("\nERROR: `" + lib + "' library for GCC not found.\n").print;
        run "rm __tmp__.c";
        exit;
      };    
    };
  );
  
  - execute cmd:STRING <-
  (
    (! is_quiet).if {
      "run `".print;
      cmd.print;
      "'\n".print;
    };
    (run cmd != 0).if {
      "FAILURE!\n".print;
    };
  );
  
  //
  // Execute function.
  //
  
  - general_front_end <-
  (
    standard_path;
    get_target;
  );
  
  - general_back_end <-
  (
    (execute_back_end).if {
      (target = "java").if {
        execute ("javac " + output_file + ".java");
      };
      (target = "dos").if {
        execute ("gcc " + output_file + ".c -o " + output_file + ".exe " + option_gcc + lib_gcc);
      };
      (target = "windows").if {
        execute ("gcc " + output_file + ".c -o " + output_file + ".exe -lgdi32 " + option_gcc + lib_gcc);
      };
      (target = "unix").if {
        (is_cop).if {
          lib_gcc := lib_gcc + " -lpthread";
        };
        execute ("gcc " + output_file + ".c -o " + output_file + " -lm " + option_gcc + lib_gcc);
      };
    };
  );
  
  - front_end <-
  // Executed by compiler, before compilation step.
  (
    general_front_end;
  );
  
  - back_end <-
  // Executed by compiler, after compilation step.
  (
    general_back_end;
  );
  
Section Public
  
   
  //
  // Debug information.
  // 
    
  - no_debug <-  
  // No debug information.
  (
    debug_level := 0;
    debug_with_code := FALSE;
  );
  
  - debug level:INTEGER <-
  // Fix debug level (default: 15)
  (
    ((level < 1) | (level > 20)).if {
      "Incorrect debug level.\n".print;
      exit;
    };
    debug_level := level;
  );
  
  - without_source <-
  // Debug mode without source code.
  (
    debug_with_code := FALSE;
  );
  
  - all_warning <-
  // All warning (deferred detect, ...).
  (
    is_all_warning := TRUE;
  );
  
  //
  // Optimization.
  //

  - optim <-
  // Full lisaac optimization.
  (
    no_debug;
    is_optimization := TRUE;
  );

  - boost <-
  // Full optimization (lisaac and gcc).
  (
    optim;
    option_gcc := option_gcc + " -O3 -fomit-frame-pointer";
  );
  
  - i level:INTEGER <-
  // Inlining level [1..5000] (default: 15)
  (
    ((level < 1) | (level > 5000)).if {
      "Incorrect inlining level.\n".print;
      exit;
    };
    inline_level := level;
  );
    
  //
  // Generate code.
  //
  
  - o outputfile:STRING <-  
  // output file (default: `input_file').
  (
    output_file := outputfile;
  );
  
  - target idf:STRING <-
  // Target for backend (unix,windows,dos,java)
  (
    target := idf;
  );
  
  - java <-
  // Product Java code.
  (
    "Warning: Java code target is just for fun. Working progress...\n".print;
    is_java := TRUE;
    target := "java";
  );
  
  - gcc option:STRING <-
  // Add option for GCC.
  (
    option_gcc := option_gcc + " " + option;
  );

  - o output:STRING <-
  // Change output file
  (
    output_file := output;
  );

  - partial <-
  // Only generate C code and don't compile it with GCC
  (
    execute_back_end := FALSE;
  );
  
  //
  // Other.
  //
  
  - q <-
  // Quiet operation.
  (
    is_quiet := TRUE;
  );
  
  - s <-
  // Statistic information.
  (
    is_statistic := TRUE;
  );

  - h <-
  // Help
  (
    help;
    exit;
  );

  - version <-
  // Version
  (
    version;
    exit;
  );
