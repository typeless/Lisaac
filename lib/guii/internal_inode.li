///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Library                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := INTERNAL_INODE;

  - copyright := "Jonathan Ponte, Maxime Audrin, Benoit Sonntag";

  - comment   := "Interface Node for GUII.";
  
  // Warning: This Prototype is shared. All the data must to be deferred !
  
Section Inherit
  
  - parent_object:OBJECT := OBJECT;

Section Private  
  
  //
  // Append for the problem with Dynamic inheritance !
  //

  
Section Public  
  
  //
  // Data.
  //
  - name:STRING_CONSTANT <- (deferred; NULL);
  - representation:STRING_CONSTANT := "None";
  - operator:CHARACTER <- (deferred; NULL);
  - priority:INTEGER_8 <- (deferred; NULL);
  - list:LINKED_LIST[INODE] <- ( deferred; NULL);
  - action:BLOCK <- { root:INODE; };
  - content:G_EXPR <- ( deferred; NULL);
  - height:REAL_32 <- ( deferred; 0);
  - width:REAL_32 <- ( deferred; 0);
  - min_height:REAL_32 <- deferred;
  - min_width:REAL_32 <- deferred;
  - type:INTEGER <- (deferred; 0);
  - depth:INTEGER <- (deferred; 0);
  //bug compilo 0.13
  - bugw_screen:REAL_32 <- (deferred;0);
  - bugh_screen:REAL_32 <- (deferred;0);

  //
  // Flags.
  //
  - is_xor:BOOLEAN <- operator = '^';
  - is_and:BOOLEAN <- operator = '&';
  - is_or:BOOLEAN  <- operator = '|';
  
  //
  // Added.
  //
  - '+' other:INODE :INODE <- deferred;
  
  //
  // Method.
  //
  - open <- deferred;
  - close <- deferred;
//  - make_representation <- deferred;
  - compute_size_from_prc p:INTEGER <- deferred;
  - semantic_evaluation (w,h:REAL_32) :BOOLEAN <- (deferred; FALSE);
  - space_evaluation (w,h:REAL_32) :REAL_32 <- (deferred; 0);

  - set_height h:REAL_32 <-
  (
    height:=h;
  );

  - set_width w:REAL_32 <-
  (
    width:=w;
  );

  //
  // browse
  //
  
  - browse_group tst:BLOCK :BOOLEAN <-
  (
    + i:INTEGER;
    (! list.is_empty).if {
	i := list.lower;
	{(i <= list.upper) && {tst.value (list.item i)}}.while_do {
	  i := i + 1;
	};
	i > list.upper
    }
  );
  
  - browse_group_group tst:BLOCK :BOOLEAN <-
  [ ? {! list.is_empty}; ]
  ( + i,j:INTEGER;
    + lst:LINKED_LIST[INODE];
    + result:BOOLEAN;

    i := list.lower;
    result := TRUE;
    {(i <= list.upper) && {result}}.while_do {
      lst := list.item i.list;
      (lst.is_empty).if {
        result := FALSE;
      } else {
        j := lst.lower;
        {(j <= lst.upper) && {tst.value (lst.item j)}}.while_do {
          j := j + 1;
        };
        result := j > lst.upper;
      };
      i := i + 1;
    };
    result
  );
  
  - get_nitem_from_prc p:INTEGER : INTEGER <-
    (
	+ j:INTEGER;

	j:=0;
	list.foreach {
		i:INODE;
		(i.priority > p).if {
			j:=j+1;
		};
	};
	j
    );

  - get_area_prc (w,h:REAL_32):REAL_32 <-
  (
	(width*height)/(w*h)*100
  );
  
  //
  // Debug routine
  //
  - display <-
  (
    name.print;
    " (".print;
    representation.print;
    ")\n".print;
    (list != NULL).if {
      base.print;
      (operator)
      .when '|' then { "(OR )\n".print; }
      .when '&' then { "(AND)\n".print; }
      .when '^' then { "(XOR)\n".print; };
      base.print;
      (list.is_empty).if {
        "\n".print;
      } else {
	" | \n".print;
      };
      (list.lower).to (list.upper) do { j:INTEGER;
	base.print; 
	" +- ".print;
	(j != list.upper).if {
	  base.append " |  ";
	} else {
	  base.append "    ";
	};
	list.item j.display;
	base.remove_last 4;	
      };
    };
  );
    
Section Private
  
  - base:STRING := STRING.create 250;
  