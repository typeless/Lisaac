/* Opérateur d'ergonomie (définir la barre des menus, barre d'outils et autres conventions...) */

/* Les actions sont les feuilles de l'arbre: c'est une fonctionnalité du programme.
 * En particulier les "window_in" forment les "plans de travail" principaux pour des actions.
 * Par exemple, la feuille de dessin de Paint est une window_in, la grille du tableur
 * de Excel, un champ texte pour Word ou n'importe quel éditeur, la zone d'affichage vidéo
 * de VLC... Ce qui est affiché dans ce window_in n'est pas décrit dans l'arbre, ce n'est pas
 * un noeud mais bien une feuille dont la fonctionnalité est à la charge du programmeur.
 * D'autre part les "button" peuvent être aussi bien un noeud de l'arbre qu'une feuille
 * et peuvent ainsi engendrer une action.
 * Les "check_box" engendrent une action, ce sont donc des feuilles (une check box ne peut
 * pas avoir de fils!)
 * Les "drop-down menu" (menu déroulant) possèdent tous uniquement des fils engendrant une action (à vérifier!)
 * Les fils d'un "drop-down menu" sont donc tous des feuilles.
 * Au final cette "grammaire" donne les règles de composition d'une GUII en se basant sur l'aspect
 * physique que devrait avoir une application traditionnelle. Par exemple, on ne peut pas avoir de
 * "menu_h" après une "menu_h" mais plutôt un "menu_v", par contre un "menu_v" ou un "menu_h" est
 * possible après une "menu_v". Pour cela il faut différencier les boutons d'un "menu_h" et d'un
 * "menu_v" dans la grammaire (bien qu'ils auront le même aspect), etc...
 * Par contre la grammaire ne traduit pas l'ergonomie d'une application. Par convention une application
 * possède une barre de menus, une barre d'outils et souvent un "window_in" qui servira de "plan de travail"
 * pour l'utilisateur. Un opérateur d'ergonomie sera nécessaire aux premiers noeuds de l'arbre. Celui-ci
 * indiquera si le noeud est la barre de menus, d'outils, etc...
 * Chaque noeud est composé d'items de base définissant son aspect physique. Il faut connaître les
 * dimensions d'un noeud pour vérifier si un pattern est valide ou non (par rapport à la taille de l'écran).
 */



Paramètre possible d'un noeud
=============================
Hyp.       = { Operator x Force }
Operator   = { OR, XOR, AND }
Force      = [0..100]
Ergonomics = {TOOL_BAR, MENU_BAR, WORK_PLACE}


La grammaire
============
BASE		->	( MENU_V | MENU_H | TAB | WINDOW_IN | BUTTON_V | BUTTON_H | CHECK )*

MENU_V		->	( FRAME_V )*

FRAME_V		->	( BUTTON_V | CHECK )*

BUTTON_V	->	( MENU_V | MENU_H | WINDOW_OUT | action )*

MENU_H		->	( FRAME_H )*

FRAME_H		->	( BUTTON_H | CHECK | DROP-DOWN_MENU )*

BUTTON_H	->	( MENU_V | WINDOW_OUT | action )*

TAB		->	( FRAME_TAB )*

FRAME_TAB	->	( BUTTON | WINDOW_IN | CHECK | DROP-DOWN_MENU )*

WINDOW_OUT	->	( FRAME_WIN_OUT )*

FRAME_WIN_OUT	->	( TAB | BUTTON | WINDOW_IN | CHECK | DROP-DOWN_MENU | MENU_V | MENU_H )*

WINDOW_IN	->	action

CHECK		->	action

DROP-DOWN_MENU	->	action

         ---------------------------------------------------------------------------

BASE		->	MENU_BAR TOOL_BAR* WINDOW_IN

MENU_BAR	->	( BUTTON_MB )*

TOOL_BAR	->	( MENU_V | MENU_H )*

BUTTON_MB	->	MENU_V 

MENU_V		->	( BUTTON_V | CHECK )*

BUTTON_V	->	( MENU_V_OUT | MENU_H_OUT | WINDOW_OUT | action )*

MENU_H		->	( BUTTON_H | CHECK | DROP-DOWN_MENU )*

BUTTON_H	->	( MENU_V_OUT | WINDOW_OUT | action )*

MENU_V_OUT	->	( BUTTON_V | CHECK )*

MENU_H_OUT	->	( BUTTON_H | CHECK )*

TAB		->	( FRAME_TAB )*

FRAME_TAB	->	( BUTTON | WINDOW_IN | CHECK | DROP-DOWN_MENU )*

WINDOW_OUT	->	( TAB | BUTTON | WINDOW_IN | CHECK | DROP-DOWN_MENU | MENU_V | MENU_H )*

WINDOW_IN	->	action

CHECK		->	action

DROP-DOWN_MENU	->	action



Item
====

BUTTON_MB 	->	TEXT | SHORTCUT
BUTTON_H	->	TEXT | ICON | SHORTCUT
BUTTON_V	->	TEXT | ICON | SHORTCUT
CHECK		->	TEXT | ICON | SHORTCUT
BUTTON		->	TEXT | ICON | TEXT_INPUT | SHORTCUT

/* A finir...
Internal group
==============
G_WIN_OUT
G_WIN_IN
G_BUTTON
G_CHECK
G_RAW
G_IMG
G_IN
G_OUT



Représentation physique des patterns
====================================
Soit n le nombre de fils d'un pattern.
On dispose des opérateurs de plcement a/b, où a est sur b, et a|b, où a est à coté de b.
::MENU_V	=	X1 | X2 | ... | Xn
	Avec Xi=BUTTON_V
::MENU_H	=	X1 / X2 / ... / Xn
	
TAB
WINDOW_IN
WINDOW_OUT
BUTTON
BUTTON_V
BUTTON_H
CHECK
FRAME
FRAME_V
FRAME_H
FRAME_TAB
FRAME_WIN_OUT
DROP-DOWN_MENU
*/

Taille l x h
============
Soit X un composant d'un noeud
MENU_V | TOOL_BAR               = Max(largeur(X1),largeur(X2),...,largeur(Xn)) x Sum(hauteur(X1),hauteur(X2),...,hauteur(Xn))
MENU_H | MENU_BAR | TOOL_BAR    = Sum(largeur(X1),largeur(X2),...,largeur(Xn)) x Max(hauteur(X1),hauteur(X2),...,hauteur(Xn))
TAB                             = Max(largeur(X1),largeur(X2),...,largeur(Xn)) x Max(hauteur(X1),hauteur(X2),...,hauteur(Xn))
WINDOW_IN                       = Taille fixée par la taille de l'écran.
WINDOW_OUT                      = Max(largeur(X1),largeur(X2),...,largeur(Xn)) x Max(hauteur(X1),hauteur(X2),...,hauteur(Xn))


