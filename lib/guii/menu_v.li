///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Library                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := MENU_V;

  - copyright := "Jonathan Ponte, Maxime Audrin, Benoit Sonntag";

  - comment   := "Vertical menu for GUII.";
  
Section Inherit
  
  - parent_internal_inode:INTERNAL_INODE := INTERNAL_INODE;
  
Section Public
  
 
  - representation:STRING_CONSTANT := "MENU_V";

  - print <-
  (
    "MENU_V".print;
  );

  - make_representation <-
  (
    list.foreach {
      i:INODE;

      (i.priority>covering).if {
        i.make_representation;
        (content!=NULL).if {
          content:=i.content;
        } else {
          content:=content / i.content;
        };
      };
    };
  );

//
// Evaluation.
//
  - compute_size_from_prc p:INTEGER <-
  [ ? {! list.is_empty}; ]
  (
    list.foreach {
      i:INODE;
      (width,height):=G_DIV_EXPR.predict_size (width.rounded,height.rounded) and (G_BUTTON.predict_size (G_OUT.predict_size (i.name)));
    };
  );


  - semantic_evaluation (w,h:REAL_32) :BOOLEAN<-
  (
    bugw_screen:=w;
    bugh_screen:=h;

    !list.is_empty && {
      browse_group { 
        i:INODE;
        (i.operator != '&')
      }
    } && {
      +nb:INTEGER;
      list.foreach {
        i:INODE;
        +tmp:REAL_32;
        +best_prc:REAL_32;

        (!i.list.is_empty).if {
          tmp:=MENU_V_OUT.evaluate i width bugw_screen height bugh_screen;
          (tmp > best_prc).if {
            best_prc:=tmp;
            i.set_representation MENU_V_OUT;
          };
          tmp:=WINDOW.evaluate i width bugw_screen height bugh_screen;
          (tmp > best_prc).if {
            best_prc:=tmp;
            i.set_representation WINDOW;
          };
          tmp:=MENU_H_OUT.evaluate i width bugw_screen height bugh_screen;
          (tmp > best_prc).if {
            best_prc:=tmp;
            i.set_representation MENU_H_OUT;
          };
        } else {
          tmp:=CHECK.evaluate i width bugw_screen height bugh_screen;
          (tmp > best_prc).if {
            best_prc:=tmp;
            i.set_representation CHECK;
          };
          tmp:=ACTION.evaluate i width bugw_screen height bugh_screen;
          (tmp > best_prc).if {
            best_prc:=tmp;
            i.set_representation ACTION;
          };
        };

        (best_prc > 0).if {
          nb:=nb+1;
        };
      };
      nb=list.count
    }
  );

- space_evaluation (w,h:REAL_32) :REAL_32<-
  (
      + r,result:REAL_32;

      // Space evaluation
      compute_size_from_prc 0;
      (height > h).if {
	"Priority 0 failed\n".print;
	compute_size_from_prc 25;
	(height > h).if {
	   "Priority 25 failed\n".print;
	   compute_size_from_prc 50;
	   (height > h).if {
		"Priority 50 failed\n".print;
		r:=0;
		set_height 0;
		set_width 0;
           } else {
		covering:=50;
		r:=get_nitem_from_prc 50;
	   };
	} else {
	   covering:=25;
	   r:=get_nitem_from_prc 25;
	};
      } else {
	covering:=0;
	r:=list.count;
     };
     result:=(r/list.count)*100;
     result:=result-(get_area_prc (w,h));
    "result := ".print;result.print;"%\n".print;
    result
  )
  [ ? {Result.in_range 0 to 100}; ];


/*
      // -> 1) R = Faisabilité de l'espace (% de recouvrement des items) (1:25%, 2:50%, 3:75%)
      // -> 2) A = Note de calcul d'aire. (% sur l'écran total)
      // Result = (R*100-A)/100  
*/
- evaluate n:INODE width w:REAL_32 height h:REAL_32 : REAL_32<-
  (
    + result:REAL_32;

    n.set_representation MENU_V;
    // Semantic evaluation && Space evaluation.
    "MENU_V semantic evaluation of ".print;n.name.print;"\n".print;
    (n.semantic_evaluation (w,h)).if {
      "MENU_V space evaluation of ".print;n.name.print;"\n".print;
      result:=n.space_evaluation (w,h);
    } else {
       result:=0;
    };
    "MENU_V result for ".print;n.name.print;"= ".print;result.print;"%\n".print;
    result
  )
  [ ? {Result.in_range 0 to 100}; ];
