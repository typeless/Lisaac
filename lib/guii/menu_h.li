///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Library                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := MENU_H;

  - copyright := "Jonathan Ponte, Maxime Audrin, Benoit Sonntag";

  - comment   := "Horizontal menu for GUII.";
  
Section Inherit
  
  - parent_internal_inode:INTERNAL_INODE := INTERNAL_INODE;
  
Section Public
  
  - representation:STRING_CONSTANT := "MENU_H";
//  + content:G_EXPR; 				//objet G_EXPR représentant le menu_h
//  + width:REAL_32;				//largeur et hauteur du menu_h
//  + height:REAL_32;

  - make_representation <-
  (
    +son_name:STRING;
    +under:G_WIN_OUT;
    +under_expr:G_EXPR;
    +expr:G_EXPR;

    //pour chaque fils
    (list.lower).to (list.upper) do {
      i:INTEGER;

      son_name:=(list.item i).name;
      //(list.item i).evaluation(screen_h,screen_w);

      //on instancie chaque fils
      (!(list.item i).list.is_empty).if {
 //       (list.item i).set_representation MENU_V;
        under_expr:=(list.item i).content;
        under:=G_WIN_OUT.create(under_expr);
      } else {
	under:=NULL;
      };

      //on crée les boutons qui vont composer le menu_h
      (i=1).if {
        expr:=G_BUTTON.create (G_OUT.create son_name) connect under.fix_width.fix_height;
      } else {
        expr:=expr | G_BUTTON.create (G_OUT.create son_name) connect under.fix_width.fix_height;
      };
    };
    content:=(G_RAW.create expr).fix_height.fix_width;
    width:=content.width_min;
    height:=content.height_min;
  );


//
// Evaluation.
//

  - compute_size_from_prc p:INTEGER <-
  [? { (!list.is_empty) }; ]
  (
    +expr:G_EXPR;
    height:=0;
    width:=0;

    list.foreach {
      i:INODE;
      (i.priority > p).if {
        ((i.parent_guii=MENU_V_OUT) || {i.parent_guii=WINDOW} || {i.parent_guii=DROP_DOWN_MENU}).if {
          (expr=NULL).if {
            expr:=(G_BUTTON.create (G_OUT.create (i.name))).fix_width.fix_height;
          } else {
            expr:=expr | ((G_BUTTON.create (G_OUT.create (i.name)))).fix_width.fix_height;
          };
        } else {
          (expr=NULL).if {
            expr:=(G_CHECK.create (G_OUT.create (i.name))).fix_width.fix_height;
          } else {
            expr:=expr | ((G_CHECK.create (G_OUT.create (i.name)))).fix_width.fix_height;
          };
        };
      };
    };
    height:=expr.height_min;
    width:=expr.width_min;
  );

  - semantic_evaluation (w,h:REAL_32) :BOOLEAN<-
  (
    bugw_screen:=w;
    bugh_screen:=h;

    /* ca renvoi un booléen et même en renvoyant tout simplement TRUE ca sort la même erreur...*/
    !list.is_empty && {
      browse_group {
        i:INODE;
        (i.operator!='&')
      }
    } && {
/*      browse_group {
        i:INODE;
        +tmp:REAL_32;
        +best_prc:REAL_32;

        "MENU_V_OUT evaluation for ".print;i.name.print;"\n".print;
        tmp:=MENU_V_OUT.evaluate i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation MENU_V;
        };
        "CHECK evaluation for ".print;i.name.print;"\n".print;
        tmp:=CHECK.evaluate i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation CHECK;
        };
        "DROP DOWN MENU evaluation for ".print;i.name.print;"\n".print;
        tmp:=DROP_DOWN_MENU.evaluate i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation DROP_DOWN_MENU;
        };
        "WINDOW evaluation for ".print;i.name.print;"\n".print;
        tmp:=WINDOW.evaluate i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation WINDOW;
        };
        best_prc > 0
      }*/
      +nb:INTEGER;
      list.foreach {
        i:INODE;
        +tmp:REAL_32;
        +best_prc:REAL_32;

        tmp:=MENU_V_OUT.evaluate i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation MENU_V_OUT;
        };
        tmp:=CHECK.evaluate i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation CHECK;
        };
        tmp:=WINDOW.evaluate i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation WINDOW;
        };
        tmp:=DROP_DOWN_MENU.evaluate i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation DROP_DOWN_MENU;
        };
        (best_prc > 0).if {
          nb:=nb+1;
        };
      };
      nb=list.count
    }
  );

- space_evaluation (w,h:REAL_32) :REAL_32<-
  (
    + r,result:REAL_32;
    compute_size_from_prc 0;
      (width > w).if {
	"Priority 0 failed\n".print;
	compute_size_from_prc 25;
	(width > w).if {
	   "Priority 25 failed\n".print;
	   compute_size_from_prc 50;
	   (width > w).if {
		"Priority 50 failed\n".print;
		r:=0;
		set_width 0;
		set_height 0;
           } else {
		r:=get_nitem_from_prc 50;
	   };
	} else {
	   r:=get_nitem_from_prc 25;
	};
      } else {
	r:=list.count;
     };
     result:=(r/list.count)*100;
     result:=result-(get_area_prc (w,h))/100;
     result
  )
  [ ? {Result.in_range 0 to 100}; ];


- evaluate n:INODE width w:REAL_32 height h:REAL_32 : REAL_32<-
  (
    + result:REAL_32;

    // changer le parent de n pour pouvoir utiliser les méthodes spécifiques à MENU_BAR
    n.set_representation MENU_H;

    // Semantic evaluation && Space evaluation.
    "MENU_H semantic evaluation of ".print;n.name.print;"\n".print;
    (n.semantic_evaluation (w,h)).if {
      //" OK\n".print;
      "MENU_H space evaluation of ".print;n.name.print;"\n".print;
      result:=n.space_evaluation (w,h);
    } else {
      // " FAILED\n".print;
       result:=0;
    };
    "MENU_H result for ".print;n.name.print;"= ".print;result.print;"%\n".print;
    n.set_representation INTERNAL_INODE;
    result
  )
  [ ? {Result.in_range 0 to 100}; ];
