///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Library                                //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name      := TOOL_BAR;

  - copyright := "Jonathan Ponte, Maxime Audrin, Benoit Sonntag";

  - comment   := "Tool bar for GUII.";
  
Section Inherit
  
  + menu_parent:MENU_H:=MENU_H;
  
Section Public
  
 
  - representation:STRING_CONSTANT := "TOOL_BAR";

/*  - get_menu_parent:INTERNAL_INODE <- 
  ( + is_menu_bar:TOOL_BAR;

    is_menu_bar ?= Self;
    is_menu_bar.menu_parent
  );*/

  /*- make_representation <-
  (
    +name:STRING;
    +under:G_WIN_OUT;
    +under_expr:G_EXPR;

    //pour chaque fils
    (list.lower).to (list.upper) do {
      i:INTEGER;
      name:=(list.item i).get_name;
      //(list.item i).evaluation(screen_h,screen_w);

      //on instancie chaque fils
      (!(list.item i).get_list.is_empty).if {
        (list.item i).set_representation MENU_V;
        under_expr:=(list.item i).get_content;
        under:=G_WIN_OUT.create(under_expr);
      } else {
	under:=NULL;
      };

      //on crée les boutons qui vont composer le menu_h
      (i=1).if {
        content:=G_BUTTON.create (G_OUT.create name) connect under.fix_width;
      } else {
        content:=content | G_BUTTON.create (G_OUT.create name) connect under.fix_width;
      };
    };
    content.fix_height.fix_width;
    width:=content.width_min;
    height:=content.height_min;
    screen_h:=screen_h-height;
    screen_w:=screen_w-width;
    (screen_w<0).if {
      "Largeur écran dépassée!\n".print;
    };
    (screen_h<0).if {
      "Hauteur écran dépassée!\n".print;
    };
  );*/
  
  //
  // Evaluation.
  //

- semantic_evaluation (w,h:REAL_32) :BOOLEAN <-
/*  [ +is_menu_h:MENU_H;
    +is_menu_v:MENU_V;

    is_menu_h ?= get_menu_parent;
    is_menu_v ?= get_menu_parent;
    ? {(is_menu_h!=NULL) || {is_menu_v!=NULL}};
  ]*/
  (
    bugw_screen:=w;
    bugh_screen:=h;

    !list.is_empty && {
      browse_group { 
        i:INODE;
        (i.operator != '&')
      }
    } && {
/*      browse_group {
        i:INODE;
        +tmp:REAL_32;
        +best_prc:REAL_32;

        "MENU_V_OUT evaluation for ".print;i.name.print;"\n".print;
        tmp:=MENU_V_OUT.evaluate i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation MENU_V_OUT;
        };
        "CHECK evaluation for ".print;i.name.print;"\n".print;
        tmp:=CHECK.evaluation i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation CHECK;
        };
        "WINDOW evaluation for ".print;i.name.print;"\n".print;
        tmp:=WINDOW.evaluation i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation WINDOW;
        };
        (menu_parent=MENU_H).if {
          "DROP DOWN MENU evaluation for ".print;i.name.print;"\n".print;
          tmp:=DROP_DOWN_MENU.evaluation i width bugw_screen height bugh_screen;
          (tmp > best_prc).if {
            best_prc:=tmp;
            i.set_representation DROP_DOWN_MENU;
          };
        };
        (menu_parent=MENU_V).if {
	  "MENU_H_OUT evaluation for ".print;i.name.print;"\n".print;
          tmp:=MENU_H_OUT.evaluate i width bugw_screen height bugh_screen;
          (tmp > best_prc).if {
            best_prc:=tmp;
            i.set_representation MENU_H_OUT;
          };
        };
        best_prc > 0
      }*/

      +nb:INTEGER;
      list.foreach {
        i:INODE;
        +tmp:REAL_32;
        +best_prc:REAL_32;
        +is_menu_h:MENU_H;
        +is_menu_v:MENU_V;

        is_menu_h ?= get_menu_parent;
        is_menu_v ?= get_menu_parent;
        tmp:=MENU_V_OUT.evaluate i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation MENU_V_OUT;
        };
        tmp:=CHECK.evaluate i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation CHECK;
        };
        tmp:=WINDOW.evaluate i width bugw_screen height bugh_screen;
        (tmp > best_prc).if {
          best_prc:=tmp;
          i.set_representation WINDOW;
        };
//        (is_menu_h!=NULL).if {
          tmp:=DROP_DOWN_MENU.evaluate i width bugw_screen height bugh_screen;
          (tmp > best_prc).if {
            best_prc:=tmp;
            i.set_representation DROP_DOWN_MENU;
          };
//        };
/*        (is_menu_v!=NULL).if {
          tmp:=MENU_H_OUT.evaluate i width bugw_screen height bugh_screen;
          (tmp > best_prc).if {
            best_prc:=tmp;
            i.set_representation MENU_H_OUT;
          };
        };*/
        (best_prc > 0).if {
          nb:=nb+1;
        };
      };
      nb=list.count
    }
  );

  - space_evaluation (w,h:REAL_32) :REAL_32<-
  (
    + r:REAL_32;

    compute_size_from_prc 0;
      (width > w).if {
	"Priority 0 failed\n".print;
	compute_size_from_prc 25;
	(width > w).if {
	   "Priority 25 failed\n".print;
	   compute_size_from_prc 50;
	   (width > w).if {
		"Priority 50 failed\n".print;
		r:=0;
		set_width 0;
		set_height 0;
           } else {
		r:=get_nitem_from_prc 50;
	   };
	} else {
	   r:=get_nitem_from_prc 25;
	};
      } else {
	r:=list.count;
     };
     (r/list.count)*100
  );


  - evaluate n:INODE :INTEGER <-  
  (
    + result:REAL_32;

    // changer le parent de n pour pouvoir utiliser les méthodes spécifiques à MENU_BAR
    n.set_representation TOOL_BAR;

    // Semantic evaluation && Space evaluation.
    "TOOL_BAR semantic evaluation of ".print;n.name.print;"\n".print;
    (n.semantic_evaluation (w,h)).if {
      /*" OK\n".print;*/
      "TOOL_BAR space evaluation of ".print;n.name.print;"\n".print;
      result:=n.space_evaluation (w,h);
    } else {
      /*" FAILED\n".print;*/
       result:=0;
    };

    "TOOL_BAR result for ".print;n.name.print;"= ".print;result.print;"%\n".print;
    n.set_representation INTERNAL_INODE;
    result
  )
  [ ? {Result.in_range 0 to 100}; ];
