///////////////////////////////////////////////////////////////////////////////
//                            Lisaac OS Library                              //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name    := FILE_UNIX;

  - copyright   := "2003-2005 JÃ©rome Boutet, 2003-2007 Benoit Sonntag, 2009 Nicolas Boulay";
  
  - comment := "File management";
  - external := `
 /*FILE_UNIX*/ 
 /*from "getconf LFS_CFLAGS" for 64 bits off_t file offset*/
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#define _LARGEFILE_SOURCE 
#define _FILE_OFFSET_BITS 64 
  `;
    
Section Inherit
  
  + parent_entry_unix:Expanded ENTRY_UNIX;
  
  + parent_file:Expanded FILE;
  
Section Private  
  
  + stream:INTEGER_32 := -1; // Unix file descripter (int).

Section Public
    
  //
  // Physical implementation.
  //
  
  - is_open:BOOLEAN <- stream != -1;
  
  - size:INTEGER_64 <-
  ( + pe:NATIVE_ARRAY(CHARACTER);
    + result:INTEGER_64; //off_t type
    pe := path.to_external;
    `{ struct stat t; stat(@pe,&t)`;		  
      result := `t.st_size`:INTEGER_64;
    `}`;
    result
  );
  
  - cursor:INTEGER_64 <-
  [
    ...
    -? {stream != -1};
  ]
  ( + str:INTEGER;    
    str := stream;    
    `lseek(@str,0,SEEK_CUR)`:INTEGER_64
  );
  
  - set_cursor n:INTEGER_64 <-
  [
    ...
    -? {stream != -1};
    -? {n <= size};
    -? {n >= 0};
  ]
  ( + str:INTEGER;    
    str := stream;    
    `fseek((@str),@n,SEEK_SET)`;
  );    
  
  - open:BOOLEAN <-
  [
    -? {stream = -1};
  ]
  ( + pa:NATIVE_ARRAY(CHARACTER);    
        
    pa := path.to_external;
    stream := `open((char*)@pa,O_RDWR)`:(INTEGER_32);         
    stream != -1
  ); 

  - open_read_only:BOOLEAN <-
  ( + pa:NATIVE_ARRAY(CHARACTER);    
    pa := path.to_external;
    stream := `open((char*)@pa,O_RDONLY)`:(INTEGER_32);
    stream != -1
  ); 
  
  - close <-
  [
    -? {stream != -1};
  ]
  ( + str:INTEGER;
        
    str := stream;    
    `close(@str)`;        
    stream := -1;
  );
    
Section FILE  
  
  - physical_read buf:NATIVE_ARRAY(UINTEGER_8) size s:INTEGER_64 :INTEGER_64 <-
  // return size read or 0 if end of input (-1 on error)
  ( + str:INTEGER;    
    str := stream;    
    `read((@str),(@buf),(size_t)(@s))`:(INTEGER_64)
  );
  
  - physical_write buf:NATIVE_ARRAY(UINTEGER_8) size s:INTEGER_64 :INTEGER_64 <-
  // return size read or 0 if end of input (-1 on error)
  ( + str:INTEGER;
    str := stream;      
    `write((@str),(@buf),(size_t)(@s))`:(INTEGER_64)
  );
  

  
