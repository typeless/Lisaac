////////////////////////////////////////////////////////////////////////////////
//                            Lisaac Librairy                                 //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name    := FLOAT_MAP;
    
  - comment := "Mapping for REAL_xx.";
  
Section PRIVATE
  
  - deferred <- crash_with_message "Slot deferred.";
  
Section REAL, REAL_32, REAL_64, REAL_80
    
  - get_map f:SELF <-
  (
    deferred;
  );
  
  - sign:BOOLEAN         <- deferred; // TRUE if positif, FALSE else.
  
  - exponent:UINTEGER_32 <- deferred;
  
  - mantissa:UINTEGER_64 <- deferred; 
    
  //
  // Consultation.
  //
  
  - is_infinite:BOOLEAN <- 
  (exponent = ((1 << exponent_bits) - 1)) && {(mantissa >> (mantissa_bits-1)) = 0};
  
  - is_nan:BOOLEAN <-
  (exponent = ((1 << exponent_bits) - 1)) && {(mantissa >> (mantissa_bits-1)) != 0};
  
  - is_zero:BOOLEAN <- (exponent = 0) && {mantissa = 0};
  
Section Public

  //
  // Format.
  //
  
  - mantissa_bits:INTEGER_8 <- deferred;

  - exponent_bits:INTEGER_8 <- deferred;
