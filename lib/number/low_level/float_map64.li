////////////////////////////////////////////////////////////////////////////////
//                            Lisaac Librairy                                 //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////

Section Header
  
  + name    := FLOAT_MAP64;
    
  - comment := "Mapping for REAL_64.";
    
Section Inherit
  
  - parent_float_map:FLOAT_MAP := FLOAT_MAP;
  
Section Mapping
  
  + map_64:UINTEGER_64;
  
Section REAL, REAL_32, REAL_64, REAL_80
    
  - get_map f:SELF <-
  ( + tab:NATIVE_ARRAY[SELF];
    tab := CONVERT[FLOAT_MAP64,NATIVE_ARRAY[SELF]].on FLOAT_MAP64;
    tab.put f to 0;    
  );
    
  - sign:BOOLEAN         <- (map_64 >> 63) = 0; // TRUE if positif, FALSE else.
  
  - exponent:UINTEGER_32 <- ((map_64 >> mantissa_bits) & 07_FFh).to_uinteger_32;
  
  - mantissa:UINTEGER_64 <- map_64 & ((1 << mantissa_bits)-1);
    
Section Public

  //
  // Format.
  //
  
  - mantissa_bits:INTEGER_8 := 52;

  - exponent_bits:INTEGER_8 := 11;
  
