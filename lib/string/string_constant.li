////////////////////////////////////////////////////////////////////////////////
//                            Lisaac Librairy                                 //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name    := /*Strict*/ STRING_CONSTANT; 
   
  - comment := "String built in.";
  
Section Inherit
  
  - parent_abstract_string:ABSTRACT_STRING := ABSTRACT_STRING;
        
Section ABSTRACT_STRING, ABSTRACT_ENTRY
  
  // BSBS: A revoir avec les Section External.
  
  + storage:NATIVE_ARRAY[CHARACTER] := 
  `NULL`:NATIVE_ARRAY[CHARACTER](NATIVE_ARRAY[CHARACTER],NULL);
  
Section Public  
  
 // - clone:SELF <- Self;
  
  + count:INTEGER := `(0)`:INTEGER;
  
  - to_string:Strict STRING <-
  ( + new:Strict STRING;
    new := STRING.create capacity;
    new.copy Self;
    new
  );
  
Section Public

  - capacity:INTEGER <- count;
  
  //
  // Aliasing String.
  //
  
  - bucket:SET[STRING_CONSTANT] := SET[STRING_CONSTANT].make;
  
  //
  // The Guru section: The Compiler consideration.
  //
  
  - set_storage p:NATIVE_ARRAY[CHARACTER] count nb_char:INTEGER <-
  // Do not use directly.
  (
    storage := p;
    count   := nb_char;
  );
  
  - new_intern p:NATIVE_ARRAY[CHARACTER] count nb_char:INTEGER :STRING_CONSTANT<-
  // Do not use directly. WARNING: Use by c_string and c_argument (COMMAND_LINE). 
  ( + result:STRING_CONSTANT;
    
    result := clone;
    result.set_storage p count nb_char;    
    //bucket.add result;
    result
  );
  
  - to_external:NATIVE_ARRAY[CHARACTER] <-
  // Gives C access to the internal `storage' (may be dangerous).
  // To be compatible with C, a null character is added at the end
  // of the internal `storage'. This extra null character is not
  // part of the Lisaac STRING.
  (
    to_string.to_external
  );

  - create_copy other:ABSTRACT_STRING :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make_copy other;
    result
  );
  
  - make_copy other:ABSTRACT_STRING <-
  ( + c:INTEGER;
    
    c := other.count;
    (c != 0).if {
      storage := NATIVE_ARRAY[CHARACTER].create c;
      storage.copy_from (other.storage) until (c-1);
      count := c;
    };
  );

  //
  // Debug: Require / Ensure / Check
  //
  
  - '?'  test:BLOCK <- test ? Self;
  
  - '-?' test:BLOCK <- test -? Self;
  
  - '+?' test:BLOCK <- test +? Self;
  
  

