////////////////////////////////////////////////////////////////////////////////
//                            Lisaac Librairy                                 //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name := AVL_SET[E];
  
Section Inherit
  
  + parent_set:Expanded SET[E];
  
  + parent_avl_tree:Expanded AVL_TREE[E];
  
Section Public 
  
  - add e:E <-
  (
    item_memory := e;
    root := do_insert root;
  );

  - fast_add e:E <-
  (
    item_memory := e;
    root := fast_do_insert root;
  );

  - clear_count <-
  (
    (! is_empty).if {
      clear_nodes root;
      root := NULL;
      count := 0;
      map_dirty := TRUE;
    };
  );

  - reference_at e:E :E <-
  ( + n:AVL_SET_NODE[E];
    + result:E;
    
    (root != NULL).if {
      n := root.at e;
      (n != NULL).if {
	result := n.item;
      };
    };
    result
  );

  - item index:INTEGER :E <-
  ( + result:E;
    
    (map_dirty).if {
      build_map;
    };
    map.item (index - 1).item
  );
  
Section Private
  
  - set_item n:AVL_SET_NODE[E] <-
  (
    n.make item_memory;    
  );

  - set_value n:AVL_SET_NODE[E];

  - exchange_and_discard (n1, n2:AVL_SET_NODE[E]) <-
  (
    map_dirty := TRUE;
    n1.set_item (n2.item);
    rebalance := TRUE;
    count := count - 1;
    discard_node n2;
  );

  - discard_node n:AVL_SET_NODE[E] <-
  ( //+ i:E;
    
    //n.make i;
    //n.set_left (lost_nodes.item);
    //lost_nodes.set_item n;
  );

  - a_new_node:AVL_SET_NODE[E] <-
  (
    AVL_SET_NODE[E].create
  );

Section Public  
  
  - create:SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make;
    result
  );
  
  - make <-
  (
    //(lost_nodes != NULL).if {
    //  clear_count;
    //} else {
    //  create map.make 0;
    //  lost_nodes ::= common_lost_nodes.reference_at generating_type;
    //  (lost_nodes = NULL).if {
//	create lost_nodes.set_item NULL;
//	common_lost_nodes.add (lost_nodes, generating_type);
//      };
//    };
  );
  
  //
  // Invariant.
  //
  
//  [
//    -? {lost_nodes != NULL};
//    -? {lost_nodes = common_lost_nodes.at generating_type};
//  ];

