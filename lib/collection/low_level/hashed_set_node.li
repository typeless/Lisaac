////////////////////////////////////////////////////////////////////////////////
//                            Lisaac Librairy                                 //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name    := HASHED_SET_NODE[E];
  
  - comment := "Auxilliary class to implement SET[E].";
    
Section Inherit
  
  - parent_any_hashed_set_node:ANY_HASHED_SET_NODE := ANY_HASHED_SET_NODE;
  
Section Public
  
  + item:E;
  
  + next:HASHED_SET_NODE[E];
  // The `next' one when some clash occurs.
  
  - set_next n:HASHED_SET_NODE[E] <-
  (
    next := n;
  )
  [
    +? {next = n};
  ];
  
Section HASHED_SET
  
  - create i:E next n:HASHED_SET_NODE[E] :SELF <-
  ( + result:SELF;
    
    result := clone;
    result.make i next n;
    result
  );
  
  - make i:E next n:HASHED_SET_NODE[E] <-
  (
    item := i;
    next := n;
  )
  [
    +? {item = i};
    +? {next = n};
  ];
  
  
