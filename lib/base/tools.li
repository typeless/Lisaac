////////////////////////////////////////////////////////////////////////////////
//                            Lisaac Librairy                                 //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name    := TOOLS;
    
  - comment := "Miscellaneous Tools";
  
Section Public
  
  - unicode_to_ascii uni:FAST_ARRAY[CHAR_UNICODE] to asc:FAST_ARRAY[CHARACTER] <-
  ( + i:INTEGER;
    {uni.item i != 0}.while_do {
      asc.put ((uni.item i & 0FFh).to_uinteger_8) to i;
      i := i + 1;
    };
    asc.put 0 to i;    
  );

  - ascii_to_unicode asc:FAST_ARRAY[CHARACTER] to uni:FAST_ARRAY[CHAR_UNICODE] <-
  ( + i:INTEGER;
    {asc.item i != 0}.while_do {
      uni.put (asc.item i) to i;
      i := i + 1;
    };
    uni.put 0 to i;    
  );