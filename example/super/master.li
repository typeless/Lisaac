////////////////////////////////////////////////////////////////////////////////
//                            Lisaac Example                                  //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        := MASTER;
  
  - author      := "Sonntag Benoit (bsonntag@loria.fr)";
  - comment     := "Example the `super' call.";
  
Section Inherit  
  
  - parent_obj:OBJ := OBJ;

Section Private  
  
  + name:STRING_CONSTANT := "MASTER";
  
  + method <-
  (
    "\tThis method is in MASTER.\n".print;
    "\tMy context is ".print;
    name.print;
    '\n'.print;
  );
  
Section Public  
  
  - main <-
  ( + obj:OBJ;    
    
    "\nCall method:\n".print;
    method;

    "\nCall `super' method:\n".print;
    parent_obj.method;

    "\nCall the parent method:\n".print;
    obj := parent_obj;
    obj.method;        
  );
