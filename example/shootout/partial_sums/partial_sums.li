////////////////////////////////////////////////////////////////////////////////
//                           Lisaac Example                                   //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name         := PARTIAL_SUMS;
  
  - bibliography := "http://IsaacOS.com";
  - author       := "Xavier Oswald (x.oswald@free.fr)";
  - comment      := "Language shootout - partial-sums";
  - external     := `#include <math.h>`;
  
Section Inherit
  
  - parent_any:OBJECT := OBJECT;

Section Public
 
  - main <-
  ( + n :INTEGER;
    + a1, a2, a3, a4, a5   :REAL_64;
    + a6, a7, a8, a9, alt  :REAL_64;
    + k2, k3, sk, ck, temp :REAL_64;
    + kr64 :REAL_64;
    + dec :STRING;

    dec := STRING.create 9;
    a1 := a2 := a3 := a4 := a5 :=0.0;
    a6 := a7 := a8 := a9 := 0.0;
    alt := -1.0;

    (COMMAND_LINE.upper = 1).if {
      n := COMMAND_LINE.item 1.to_integer;
    } else {
      n := 0;
    };

    1.to n do { k:INTEGER;
      kr64 := k.to_real_64;
      k2 := kr64*kr64;
      k3 := k2*kr64;
      `@sk = sin(@kr64);`;
      `@ck = cos(@kr64);`;
      alt := -alt;

      `@temp = pow(2.0/3.0, @kr64-1);`;
      a1 := a1 + temp;

      `@temp = pow(@kr64, -0.5);`;
      a2 := a2 + temp;

      a3 := a3 + 1.0/(kr64*(kr64+1.0));
      a4 := a4 + 1.0/(k3 * sk*sk);
      a5 := a5 + 1.0/(k3 * ck*ck);
      a6 := a6 + 1.0/kr64;
      a7 := a7 + 1.0/k2;
      a8 := a8 + alt/kr64;
      a9 := a9 + alt/(2.0*kr64 -1.0);
    };
    
    a1.append_in dec decimal 9;
    dec.print;
    dec.make_empty;
    "\t(2/3)^k\n".print;
    a2.append_in dec decimal 9;
    dec.print;
    dec.make_empty;
    "\tk^-0.5\n".print;
    a3.append_in dec decimal 9;
    dec.print;
    dec.make_empty;
    "\t1/k(k+1)\n".print;
    a4.append_in dec decimal 9;
    dec.print;
    dec.make_empty;
    "\tFlint Hills\n".print;
    a5.append_in dec decimal 9;
    dec.print;
    dec.make_empty;
    "\tCookson Hills\n".print;
    a6.append_in dec decimal 9;
    dec.print;
    dec.make_empty;
    "\tHarmonic\n".print;
    a7.append_in dec decimal 9;
    dec.print;
    dec.make_empty;
    "\tRiemann Zeta\n".print;
    a8.append_in dec decimal 9;
    dec.print;
    dec.make_empty;
    "\tAlternating Harmonic\n".print;
    a9.append_in dec decimal 9;
    dec.print;
    "\tGregory\n".print;
  );
