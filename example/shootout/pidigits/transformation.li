/* The Computer Language Shootout Benchmarks
   http://shootout.alioth.debian.org/
   contributed by Xavier Oswald

   Compilation:
     - lisaac -O -i20 pidigits.li
*/

Section Header
  
  + name := TRANSFORMATION;
  
Section Inherit
  
  - parent_any:OBJECT := OBJECT;

Section Private

  + q :UINTEGER_BIG;

  + r :UINTEGER_BIG;

  + s :UINTEGER_BIG;

  + t :UINTEGER_BIG;

  + k :INTEGER;

Section Public

  - create_integer (pq, pr, ps, pt:INTEGER) :SELF <- 
  ( + result :SELF;
    result := clone;
    result.make_integer(pq, pr, ps, pt);
    result
  );

  - create_big_integer (pq, pr, ps, pt:UINTEGER_BIG) :SELF <-
  ( + result :SELF;
    result := clone;
    result.make_big_integer(pq, pr, ps, pt);
    result
  );

  - make_integer (pq, pr, ps, pt:INTEGER) <-
  (
    q := pq.to_uinteger_big;
    r := pr.to_uinteger_big;
    s := ps.to_uinteger_big;
    t := pt.to_uinteger_big;
    k := 0;
  );

  - make_big_integer (pq, pr, ps, pt:UINTEGER_BIG) <-
  (
    q := pq;
    r := pr;
    s := ps;
    t := pt;
    k := 0;
  );

  - next :TRANSFORMATION <-
  (
    k := k + 1;
    q := k.to_uinteger_big;
    r := (4 * k + 2).to_uinteger_big;
    s := 0.to_uinteger_big;
    t := (2 * k + 1).to_uinteger_big;
    Self
  );

  - extract j:INTEGER :INTEGER <-
  ( + bigj        :UINTEGER_BIG;
    + numerator   :UINTEGER_BIG;
    + denominator :UINTEGER_BIG;
    bigj := j.to_uinteger_big;
    numerator := q * bigj + r;
    denominator := s * bigj + t;
    (numerator/denominator).to_integer
  );

  - qrst (pq, pr, ps, pt:INTEGER) :TRANSFORMATION <-
  (
    q := pq.to_uinteger_big;
    r := pr.to_uinteger_big;
    s := ps.to_uinteger_big;
    t := pt.to_uinteger_big;
    k := 0;
    Self 
  );

  - compose (a :TRANSFORMATION) :TRANSFORMATION <-
  ( + trans :TRANSFORMATION;

    trans.create_integer(q*a.q,
                     (q*a.r)+(r*a.t),
                     (s*a.q)+(t*a.s),
                     (s*a.r)+(t*a.t));
    trans

    /*   return new Transformation(
         q.multiply(a.q)
         ,(q.multiply(a.r)).add( (r.multiply(a.t)) )
         ,(s.multiply(a.q)).add( (t.multiply(a.s)) )
         ,(s.multiply(a.r)).add( (t.multiply(a.t)) )
         );
    */
  );
