Section Header
  
  + name := REGEXDNA;
  
  - external := 
`
#define __USE_STRING_INLINES
#include <pcre.h>
pcre *re;
pcre_extra *re_ex;
int re_eo;
const char *re_e;
`;

Section Public
  - pcre_compile (p:STRING_CONSTANT) <-
  ( + storage:NATIVE_ARRAY[CHARACTER];
    storage := p.storage;
    `re = pcre_compile(@storage, PCRE_CASELESS, &re_e, &re_eo, NULL)`;
  );
  
  - pcre_study <-
  (
    re_ex = pcre_study(re, 0, &re_e);
  );
  
  - pcre_exec src:STRING :INTEGER <-
  ( + storage:NATIVE_ARRAY[CHARACTER];
    + len:INTEGER;
    storage := src.storage;
    len := src.count;
    `pcre_exec(re, re_ex, @storage, src->len, pos, 0, m, 3)
  );
  
  - fb_subst(dst,src:STRING, p:STRING_CONSTANT,r:STRING_CONSTANT) :INTEGER <-
  // Substitute pattern p with replacement r, copying from src to dst buffer. 
  ( + dp:NATIVE_ARRAY[CHARACTER];
    int re_eo, m[3], pos, rlen, clen;
    
    pcre_compile p;
    (`re`:POINTER = NULL).if {
      die_with_code 1;
    };
    pcre_study;
    dst.clear;
    rlen := r.count;
    pos := 0;
    {pcre_exec(re, re_ex, src->buf, src->len, pos, 0, m, 3) >= 0}.while_do {
      pos := m.item 1;
      clen := m.item 0 - pos;
      
      dp := fb_need(dst, clen+rlen);
      1.to clen do { j:INTEGER;
        dst.add_last (src.item (pos+j));
      };    
      1.to rlen do { j:INTEGER;
        dst.add_last (r.item j);
      };    
    };    
    1.to clen do { j:INTEGER;
      dst.add_last (src.item (pos+j));
    };      
    dst.count
  );

  
  - fb_countmatches (src:STRING, p:STRING_CONSTANT) :INTEGER <-
  // Count all matches with pattern p in src buffer. 
  ( pcre *re;
    pcre_extra *re_ex;
    const char *re_e;
    
    int re_eo, m[3], pos, count;
    
    + p_storage:NATIVE_ARRAY[CHARACTER];
    p_storage := p.storage;
    (! (re := `pcre_compile(@p_storage, PCRE_CASELESS, &re_e, &re_eo, NULL)` ) ).if {
      die_with_code 1;
    };
    re_ex := pcre_study(re, 0, &re_e);
    {`pcre_exec(re, re_ex, src->buf, src->len, pos, 0, m, 3)` >= 0}.while_do {
      pos := m.item 1;
      count := count + 1;
    };
    count
  );

  - variants:FAST_ARRAY[STRING_CONSTANT] := 
  ( + result:FAST_ARRAY[STRING_CONSTANT];
    
    result := FAST_ARRAY[STRING_CONSTANT].create_with_capacity 10;
    result.add_last "agggtaaa|tttaccct";         result.add_last "[cgt]gggtaaa|tttaccc[acg]";
    result.add_last "a[act]ggtaaa|tttacc[agt]t"; result.add_last "ag[act]gtaaa|tttac[agt]ct";
    result.add_last "agg[act]taaa|ttta[agt]cct"; result.add_last "aggg[acg]aaa|ttt[cgt]ccct";
    result.add_last "agggt[cgt]aa|tt[acg]accct"; result.add_last "agggta[cgt]a|t[acg]taccct";
    result.add_last "agggtaa[cgt]|[acg]ttaccct"; result.add_last NULL;
    result
  );

  - subst:FAST_ARRAY[STRING_CONSTANT] := 
  ( + result:FAST_ARRAY[STRING_CONSTANT];
    
    result := FAST_ARRAY[STRING_CONSTANT].create_with_capacity 23;
    result.add_last "B"; result.add_last "(c|g|t)"; 
    result.add_last "D"; result.add_last "(a|g|t)";
    result.add_last "H"; result.add_last "(a|c|t)";
    result.add_last "K"; result.add_last "(g|t)";
    result.add_last "M"; result.add_last "(a|c)";
    result.add_last "N"; result.add_last "(a|c|g|t)";
    result.add_last "R"; result.add_last "(a|g)";
    result.add_last "S"; result.add_last "(c|g)";
    result.add_last "V"; result.add_last "(a|c|g)";
    result.add_last "W"; result.add_last "(a|t)";
    result.add_last "Y"; result.add_last "(c|t)";
    result.add_last NULL;
    result
  );

  - main <-
  ( + seq_0,seq_1:STRING;
    
    const char **pp;
    size_t ilen, clen, slen;
    int flip;
    
    seq_0 := STRING.create 1024;
    seq_1 := STRING.create 1024;
    IO.read_line;
    {IO.end_of_input}.until_do {
      seq_0.append (IO.last_string);
      IO.read_line;
    };
    
    clen = fb_subst(&seq[1], &seq[0], ">.*|\n", "");
    
    for (pp = variants; *pp; pp++)
    printf("%s %d\n", *pp, fb_countmatches(&seq[1], *pp));
    
    slen := 0;
    flip := 1;
    
    for (slen = 0, flip = 1, pp = subst; *pp; pp += 2, flip = 1-flip)
    slen = fb_subst(&seq[1-flip], &seq[flip], *pp, pp[1]);
    '\n'.print;
    ilen.print;
    '\n'.print;
    clen.print;
    '\n'.print;
    slen.print;
    '\n'.print;        
  );

