////////////////////////////////////////////////////////////////////////////////
//                           Lisaac Example                                   //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name         := FASTA;
  
  - bibliography := "http://IsaacOS.com";
  - author       := "Xavier Oswald (x.oswald@free.fr)";
  - comment      := "Language shootout - fasta"; 
  
Section Inherit
  
  - parent_any:OBJECT := OBJECT;

Section Private
  
  - im           :INTEGER := 139968;

  - ia           :INTEGER := 3877;

  - ic           :INTEGER := 29573;

  - last         :INTEGER := 42;

  - line_length  :INTEGER := 60;

  - buffer_size  :INTEGER := 1024;

  - index        :INTEGER := 0;
  
  - iub          :FAST_ARRAY[FREQUENCY]; 
  
  - homo_sapiens :FAST_ARRAY[FREQUENCY]; 

    //static byte[] bbuffer = new byte[BUFFER_SIZE];
  - bbuffer :FAST_ARRAY[CHARACTER] := FAST_ARRAY[CHARACTER].create buffer_size;

    //public static byte[] ALUB = ALU.getBytes();
  - alub :FAST_ARRAY[CHARACTER] := alu;
  
  - alu :STRING_CONSTANT :=
            "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\
            \GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\
            \CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\
            \ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\
            \GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\
            \AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\
            \AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA";

  - create_iub <-
  ( + freq:FREQUENCY;
    iub := FAST_ARRAY[FREQUENCY].create_with_capacity 15;
    freq := FREQUENCY.create('a', 0.27);
    iub.add_last freq;
    freq := FREQUENCY.create('c', 0.12);
    iub.add_last freq;
    freq := FREQUENCY.create('g', 0.12);
    iub.add_last freq;
    freq := FREQUENCY.create('t', 0.27);
    iub.add_last freq;
    freq := FREQUENCY.create('B', 0.02);
    iub.add_last freq;
    freq := FREQUENCY.create('D', 0.02);
    iub.add_last freq;
    freq := FREQUENCY.create('H', 0.02);
    iub.add_last freq;
    freq := FREQUENCY.create('K', 0.02);
    iub.add_last freq;
    freq := FREQUENCY.create('M', 0.02);
    iub.add_last freq;
    freq := FREQUENCY.create('N', 0.02);
    iub.add_last freq;
    freq := FREQUENCY.create('R', 0.02);
    iub.add_last freq;
    freq := FREQUENCY.create('S', 0.02);
    iub.add_last freq;
    freq := FREQUENCY.create('V', 0.02);
    iub.add_last freq;
    freq := FREQUENCY.create('W', 0.02);
    iub.add_last freq;
    freq := FREQUENCY.create('Y', 0.02);
    iub.add_last freq;
  );

  - create_homo_sapiens <-
  ( + freq:FREQUENCY;
    homo_sapiens := FAST_ARRAY[FREQUENCY].create_with_capacity 4;
    freq := FREQUENCY.create('a', 0.3029549426680);
    homo_sapiens.add_last freq;
    freq := FREQUENCY.create('c', 0.1979883004921);
    homo_sapiens.add_last freq;
    freq := FREQUENCY.create('g', 0.1975473066391);
    homo_sapiens.add_last freq;
    freq := FREQUENCY.create('t', 0.3015094502008);
    homo_sapiens.add_last freq;
  );

  - radom (max:REAL_64) :REAL_64 <-
  (
    last := (last * ia + ic) % im;
    max * last / im
  );

  - make_cumulative (a:FAST_ARRAY[FREQUENCY]) <-
  ( + cp :REAL_64;
    0.to (a.upper - 1) do { i:INTEGER;
      cp := cp + (a.item i).p;
      (a.item i).put_p cp;
    };
  );

  - select_random (a:FAST_ARRAY[FREQUENCY]) <-
  ( + len :INTEGER;
    + r   :REAL_64;
    + c   :CHARACTER;
    + b   :BOOLEAN;

    len := a.upper;
    r   := random(1.0);
    0.to (len-1) do { i:INTEGER;
      (r < (a.item i).p).if {
        c := (a.item i).c;
        b := TRUE;
      };
    };
    (!b).if {
      c := (a.item(len-1)).c;
    };
    c
  );

  - make_random_fasta(id, desc:STRING_CONSTANT, a :FAST_ARRAY[FREQUENCY], n:INTEGER/*,OutputStream writer*/) <-
  ( + m :INTEGER;
    + n_temp :INTEGER;
    + desc_str :STRING;

    n_temp := n;
    desc_str := STRING.create 5;
    index := 0;
    desc_str.append ">";
    desc_str.append id;
    desc_str.append " ";
    desc_str.append desc;
    desc_str.append "\n";
    //writer.write(descStr.getBytes());

    {n_temp > 0}.while_do {

      (n_temp < line_length).if {
        m := n_temp;
      } else {
        m := line_length;
      };

      ((buffer_size - index) < m).if {
        //writer.write(bbuffer, 0, index);
        index := 0;
      };

      0.to (m-1) do { i:INTEGER;
         //bbuffer[index++] = selectRandom(a); 
      };
      //bbuffer[index++] = '\n';
      n_temp := n_temp-line_length;
    };
    (index != 0).if {
      //writer.write(bbuffer, 0, index);
    };

  );

  - make_repeat_fasta(id, desc, alu:STRING_CONSTANT, n:INTEGER /*, OutputStream writer*/) <-
  ( + m, k, kn :INTEGER;
    + n_temp   :INTEGER;
    + desc_str :STRING;

    n_temp := n;
    desc_str := STRING.create 5;
    //kn := ALUB.upper;
    index := 0;
    desc_str.append ">";
    desc_str.append id;
    desc_str.append " ";
    desc_str.append desc;
    desc_str.append "\n";
    //writer.write(descStr.getBytes());

    {n_temp > 0}.while_do {
      (n_temp < line_length).if {
        m := n_temp;
      } else {
        m := line_length;
      };
      
      ((buffer_size - index) < m).if {
        //writer.write(bbuffer, 0, index);
        index := 0;
      };

      0.to (m-1) do { i:INTEGER;
        (k = kn).if {
          k := 0;
        };
        //bbuffer[index++] = ALUB[k];
        k := k+1;
      };
      //bbuffer[index++] = '\n';
      n_temp := n_temp-line_length;
    };

    (index != 0).if {
      //writer.write(bbuffer, 0, index); 
    };
  );

Section Public
 
  - main <-
  ( + n:INTEGER;
    
    (COMMAND_LINE.upper = 1).if {
      n := COMMAND_LINE.item 1.to_integer;
    } else {
      n := 250_000;
    };

    create_iub;
    create_homo_sapiens;
    make_cumulative(homo_sapiens);
    make_cumulative(iub);
    //OutputStream out = System.out;
    make_repeat_fasta("ONE", "Homo sapiens alu", alu, n * 2 /*, out*/);
    make_random_fasta("TWO", "IUB ambiguity codes", iub, n * 3 /*, out*/);
    make_random_fasta("THREE", "Homo sapiens frequency", homo_sapiens, n * 5/*, out*/);
  );
