////////////////////////////////////////////////////////////////////////////////
//                           Lisaac Example                                   //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name         := FREQUENCY;
  
  - bibliography := "http://IsaacOS.com";
  - author       := "Xavier Oswald (x.oswald@free.fr)";
  - comment      := "Language shootout - fasta (based on the java version)"; 
  
Section Inherit
  
  - parent_any:OBJECT := OBJECT;

Section Public
 
  + c :CHARACTER;

  + p :REAL_64;

  - create (p_c:CHARACTER, p_p:REAL_64) :SELF <-
  ( + result :SELF;

    result := clone;
    result.make(p_c,p_p);
    result
  );

  - make (p_c:CHARACTER, p_p:REAL_64) <-
  (
    c := p_c;
    p := p_p;
  );

  - put_p r:REAL_64  <-
  (
    p := r;
  );
