///////////////////////////////////////////////////////////////////////////////
//                              Lisaac Example                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header

  + name := MANDELBROT2;
  
  - comment := "Mandelbrot set generation shootout benchmarck, based on the C version";
  
  - author := "Anthony Pajot <anthony.pajot@etu.enseeiht.fr>, Xavier Oswald <x.oswald@free.fr>";
    
Section Inherit
  
  - parent_object : OBJECT := OBJECT;
  
Section Public
   
  - main <-
  ( + size, i, iter: INTEGER;
    + zr, zi, cr, ci, pr, pi, limit: REAL_64;
    + stop, gone: BOOLEAN;
    + bit, bit_accu: UINTEGER_8;
    + cmd:STRING;          
      
    cmd := COMMAND_LINE.item 1;
    size := cmd.to_integer;    
      
    "P4\n".print;
    cmd.print;
    ' '.print;
    cmd.print;
    "\n".print;
        
    // compute mandelbrot's bitmap
    limit := 4.0;
    iter  := 50;
    bit   := 080h;
    0.to (size-1) do { y:INTEGER;    
      ci := (y * 2).to_real_64 / size - 1.0;

      0.to (size-1) do { x:INTEGER;
        cr := (x * 2).to_real_64 / size - 1.5;

        zr:=zi:=pr:=pi:=0;
        i := 0;
        stop := FALSE;
        {stop}.until_do {
          zi := zr * zi * 2 + ci;
          zr := pr - pi + cr;
          pi := zi * zi;
          pr := zr * zr;
          (pi+pr > limit).if {
            stop := TRUE;
            gone := TRUE;
          } else {
            i := i+1;
            stop := (i = iter);
          };
        };

        (gone).if {
          gone := FALSE;
        } else {
          bit_accu := bit_accu | bit;
        };

        (bit = 1).if {
          bit_accu.to_character.print;
          bit_accu := 0;
          bit := 80h;
        } else {
          bit := bit >> 1;
        };
      };

      (bit != 80h).if {
        bit_accu.to_character.print;
        bit_accu := 0;
        bit := 80h;
      };
    };   
  );
