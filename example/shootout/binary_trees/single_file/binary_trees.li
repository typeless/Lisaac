/* The Computer Language Shootout Benchmarks
   http://shootout.alioth.debian.org/
   contributed by Xavier Oswald

   Compilation:
     - lisaac -O -i20 binary_trees.li
*/

// SPLITFILE=binary_trees.li
Section Header
  
  + name := BINARY_TREES;
  
Section Inherit
  
  - parent_any:OBJECT := OBJECT;

Section Private

  - min_depth :INTEGER := 4;

Section Public
 
  - main <-
  ( + n, check        :INTEGER;
    + max_depth       :INTEGER;
    + stretch_depth   :INTEGER;
    + depth           :INTEGER;
    + iterations      :INTEGER;
    + long_lived_tree :TREENODE;

    (COMMAND_LINE.upper = 1).if {
      n := COMMAND_LINE.item 1.to_integer;
    };
    
    (min_depth + 2 > n).if {
      max_depth := min_depth+2;
    } else {
      max_depth := n;
    };
    stretch_depth := max_depth+1;
    check := TREENODE.bottom_up_tree (0,stretch_depth).item_check;

    "stretch tree of depth ".print;
    stretch_depth.print;
    "\t check: ".print;
    check.print;
    '\n'.print;
    
    long_lived_tree := TREENODE.bottom_up_tree (0, max_depth);
    depth := min_depth;
    {depth <= max_depth}.while_do {
      iterations := 1 << (max_depth - depth  + min_depth);
      check := 0;
      1.to iterations do { i:INTEGER;
        check := check + TREENODE.bottom_up_tree (i,depth) .item_check;
        check := check + TREENODE.bottom_up_tree (-i,depth).item_check;
      };
      (iterations * 2).print;
      "\t trees of depth ".print;
      depth.print;
      "\t check: ".print;
      check.print;
      '\n'.print;
      depth := depth + 2;
    };
    
    "long lived tree of depth ".print;
    max_depth.print;
    "\t check: ".print;
    long_lived_tree.item_check.print;
    '\n'.print;
  );
// class BINARY_TREES

// SPLITFILE=treenode.li
Section Header
  
  + name := TREENODE;
  
Section Inherit
  
  - parent_any:OBJECT := OBJECT;

Section Private

  + left  :TREENODE;

  + right :TREENODE;

  + item  :INTEGER;

Section Public
  
  - item_check:INTEGER <-
  ( + item_tmp:INTEGER;

    (left = NULL).if {
      item_tmp := item;
    } else {
      item_tmp := item + left.item_check - right.item_check;
    };
    item_tmp
  );

  - bottom_up_tree (item, depth:INTEGER) :SELF <-
  ( + result :SELF;

    result := clone;
    
    (depth > 0).if {
      result.make (
        bottom_up_tree(2*item-1, depth-1),
        bottom_up_tree(2*item, depth-1),
        item
      );
    } else {
      result.make_item_only item;
    };
    result
  );

  - make (l, r:TREENODE, i:INTEGER) <-
  (
    left  := l;
    right := r;
    item  := i;
  );

  - make_item_only i:INTEGER <-
  (
    item := i;
  );
// class TREENODE

