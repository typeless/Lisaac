Section Header
  
  + name := THREADRING;
  
  - external := 
`
#include <pthread.h>
pthread_attr_t stack_attr;
`;
  
Section Inherit
  
  - parent_object:OBJECT := OBJECT;
  
Section Public
  
  - threads:INTEGER := 503;

  // staticaly initialize mutex[0] mutex 
  - mutex:FAST_ARRAY[MUTEX] := FAST_ARRAY[MUTEX].create threads;

  - data:FAST_ARRAY[INTEGER] := FAST_ARRAY[INTEGER].create threads;
  
  - stacks:FAST_ARRAY[STACK] := FAST_ARRAY[STACK].create threads;

  // stacks must be defined staticaly, or my i386 box run of virtual memory for this
  // process while creating thread +- #400 
  
Section External
  
  - thread num:POINTER :POINTER <-
  ( +l,r,token:INTEGER;
    
    l := CONVERT[POINTER,INTEGER].on num;
    r := (l+1) % threads;
   
    {`(1)`:BOOLEAN(TRUE,FALSE)}.while_do {
      mutex.item l.lock;
      token := data.item l;
      (token != 0).if {
        data.put (token - 1) to r;
        mutex.item r.unlock;
      } else {
        (l+1).print;
        '\n'.print;        
        die_with_code 0;
      };
    };
    NULL
  );
  
Section Public
  
  - main <-
  (     
    data.put (COMMAND_LINE.item 1.to_integer) to 0;

    init_attr; 
    
    0.to (threads-1) do { i:INTEGER;      
      mutex.item i.init;
      mutex.item i.lock;

      stacks.item i.set_attr;
      THREAD.create i;      
    };
    
    mutex.first.unlock;
    THREAD.join;
    `/*`;
    thread 0;
    thread 1;
    `*/`;    
  );
  
Section Private
  
  - init_attr <- `pthread_attr_init(&stack_attr)`;
  
