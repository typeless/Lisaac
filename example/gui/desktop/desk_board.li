
/***************************************************************************
*                      Isaac Object Operating System                       *
*                             Isaac Library                                *
*                      LORIA - UHP - INRIA - FRANCE                        *
*                   Benoit SONNTAG - bsonntag@loria.fr                     *
*                          http://www.IsaacOS.com                          *
***************************************************************************/
Section Header

  + name    := DESK_BOARD;
    
  - bibliography:="http://IsaacOS.com";
  - author      :="Sonntag Benoit (bsonntag@loria.fr)";
  - comment     :="Interface managment for Intelligent System And Advanced Concept.";

  - date    :="2003/04";
  
Section Inherit  
  
  + parent_g_raw:Expanded G_RAW;
  
Section Private
  
  - path_base:ABSTRACT_STRING;
  
  - path_tmp:STRING := STRING.create 256;
  
  - path l:ABSTRACT_STRING :STRING <-
  (
    path_tmp.copy path_base;
    path_tmp.append l; 
    path_tmp
  );    
  
Section Public
  
  - isaac:G_WIN_OUT;
  - tools:G_WIN_OUT;
  - multimedia:G_WIN_OUT;
  - game:G_WIN_OUT;
    
  - create path_dir:ABSTRACT_STRING :SELF <-
  (         
    path_base := path_dir;
    isaac := G_WIN_OUT.create (
      G_RAW.create (        
        G_BUTTON.create (G_OUT.create (path "icons/terminal.bmp") | G_OUT.create " Terminal ")
       // connect (SHELL.run)
      ) /
      G_RAW.create (
        G_BUTTON.create (G_OUT.create (path "icons/about.bmp") | G_OUT.create " About ") 
       /* connect (ABOUT.run)*/ /
        G_BUTTON.create (G_OUT.create (path "icons/reboot.bmp") | G_OUT.create " Reboot ")
        action { b:G_BUTTON; "Reboot...\n".print; die_with_code 0; }
      )
    );    
    tools := G_WIN_OUT.create (
      G_RAW.create (
        G_BUTTON.create (G_OUT.create (path "icons/calculator.bmp") | G_OUT.create " Calculator ")
        connect (CALCULATOR.run)
      )
    );
    multimedia := G_WIN_OUT.create (
      G_RAW.create (
        G_BUTTON.create (G_OUT.create (path "icons/viewer.bmp") | G_OUT.create " Viewer ")
       // connect (VIEWER.run) 
      ) /
      G_RAW.create (
        G_BUTTON.create (G_OUT.create (path "icons/video.bmp") | G_OUT.create " Video ")
      )
    );    
    game := G_WIN_OUT.create (
      G_RAW.create (
        G_BUTTON.create (G_OUT.create (path "icons/tetris.bmp") | G_OUT.create " Tetris ") 
        connect (TETRIS.run) /
        G_BUTTON.create (G_OUT.create (path "icons/power4.bmp") | G_OUT.create " Power 4 ") 
        connect (FOURONLINE.run) /
        G_BUTTON.create (G_OUT.create (path "icons/sudoku.bmp") | G_OUT.create " Sudoku ")
        connect (SU_DOKU.run)
      )
    );
    
    make (
      G_RAW.create
      (
        G_BUTTON.create (G_OUT.create (path "icons/isaac.bmp"))     connect isaac |
        G_BUTTON.create (G_OUT.create (path "icons/tools.bmp"))      connect tools |
        G_BUTTON.create (G_OUT.create (path "icons/multimedia.bmp")) connect multimedia |
        G_BUTTON.create (G_OUT.create (path "icons/game.bmp"))       connect game
      ).fix_width |
      G_OUT.create "Isaac Operating System" justify (G_OUT.center) |
      G_RAW.create 
      (
        G_BUTTON.create (G_OUT.create (path "icons/desk1.bmp")) 
        action { b:G_BUTTON;
          move_virtual_screen 0;
        } |
        G_BUTTON.create (G_OUT.create (path "icons/desk2.bmp")) 
        action { b:G_BUTTON;
          move_virtual_screen (-DESK.width);
        }
      ).fix_width |
      CLOCK_VIEW.run.fix_width
    );
    Self
  );
  
  - receive msg:EVENT <-
  ( + evt_time:EVENT_TIMER;
        
    evt_time ?= msg;    
    ((evt_time != NULL) && {evt_time.destination = NULL}).if {
      (DESK.virtual_screen.x_window != pos_v).if {
        DESK.virtual_screen.move (inc_v>>1,0);
        ((DESK.virtual_screen.x_window < pos_v) && {inc_v < 0}).if {
          inc_v := 2;
        }.elseif {(DESK.virtual_screen.x_window > pos_v) && {inc_v > 0}} then {
          inc_v := -2;
        } else {
          inc_v := inc_v + inc_v / 2;
        };
      } else {
        TIMER.sub_client Self;
      };
    } else {    
      parent_g_raw.receive msg;
    };
  );
  
Section Private
  
  - pos_v:INTEGER;
  - inc_v:INTEGER;
  
  - move_virtual_screen p:INTEGER <-
  (     
    (DESK.virtual_screen.x_window != p).if {
      pos_v := p;
      (DESK.virtual_screen.x_window > p).if {
        inc_v := -2;
      } else {
        inc_v := 2;
      };
      TIMER.add_client Self;    
    };            
  );






