////////////////////////////////////////////////////////////////////////////////
//                           Lisaac OS library                                //
//                                                                            //
//                  LSIIT - ULP - CNRS - INRIA - FRANCE                       //
//                                                                            //
//    This program is free software; you can redistribute it and/or modify    //
//    it under the terms of the CeCILL v2 License as published by the         //
//    CEA - CNRS - INRIA.                                                     //
//                                                                            //
//    This program is distributed in the hope that it will be useful,         //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the            //
//    CeCILL v2 License for more details.                                     //
//                                                                            //
//    You should have received a copy of the CeCILL v2 license along with     //
//    this program.                                                           //
//    If not, see <http://www.cecill.info/licences/Licence_CeCILL_V2-en.txt>  //
//                                                                            //
//                    http://isaacproject.u-strasbg.fr/                       //
////////////////////////////////////////////////////////////////////////////////
Section Header
  
  + name        :=FILE_SYSTEM;

  - comment     :="File System manager for Unix.";
  
  - external := `#include <unistd.h>`; // For `getcwd'
  
Section Inherit  
  
  + parent_directory:DIRECTORY <-
  ( + cwd:NATIVE_ARRAY[CHARACTER];
    + root:ENTRY;
    + result:DIRECTORY;
    
    string_tmp.clear;
    cwd := string_tmp.to_external;
    `getcwd(@cwd,255)`;
    string_tmp.from_external cwd;
    
    ABSTRACT_ENTRY.reduce_path string_tmp;
    root := ENTRY.get_entry string_tmp;
    ? {root != NULL};
    (root = NULL).if {
    //  STD_ERROR.put_string "FATAL ERROR: root directory `";
    //  STD_ERROR.put_string string_tmp;
    //  STD_ERROR.put_string "' not found.";
      "FILE_SYSTEM : Error Root 1\n".print;
      OBJECT.die_with_code (OBJECT.exit_failure_code);
    };
    root := root.open;
    
    ? {root != NULL};
    (root = NULL).if {
      //STD_ERROR.put_string "FATAL ERROR: root directory `";
      //STD_ERROR.put_string string_tmp;
      //STD_ERROR.put_string "' not open.";
      "FILE_SYSTEM : Error root 2\n".print;
      OBJECT.die_with_code (OBJECT.exit_failure_code);
    };
    result ?= root;
    ? {result != NULL};
    parent_directory := result
  );
  
Section Private  
  
  - string_tmp:STRING := STRING.create 255; 
  
Section ISAAC
  
  - make <-
  // Isaac compatibility.
  (
    // Nothing.
  );
  


