///////////////////////////////////////////////////////////////////////////////
//                             Lisaac Compiler                               //
//                                                                           //
//                   LSIIT - ULP - CNRS - INRIA - FRANCE                     //
//                                                                           //
//   This program is free software: you can redistribute it and/or modify    //
//   it under the terms of the GNU General Public License as published by    //
//   the Free Software Foundation, either version 3 of the License, or       //
//   (at your option) any later version.                                     //
//                                                                           //
//   This program is distributed in the hope that it will be useful,         //
//   but WITHOUT ANY WARRANTY; without even the implied warranty of          //
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           //
//   GNU General Public License for more details.                            //
//                                                                           //
//   You should have received a copy of the GNU General Public License       //
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.   //
//                                                                           //
//                     http://isaacproject.u-strasbg.fr/                     //
///////////////////////////////////////////////////////////////////////////////
Section Header

  + name      := Expanded ITM_KEYWORD;

  - copyright := "2009 Mildred Ki'Lya";
  - author    := "Mildred Ki'Lya <http://ki.lya.online.fr>";
  - comment   := "Flags for keywords";

  - import    := UINTEGER_8;
  - export    := UINTEGER_8;

Section Private

  - make f:INTEGER_8 :ITM_KEYWORD <-
  (
    flags := f;
    Self
  );

Section Public

  + flags :INTEGER_8;

  - create f:INTEGER_8 :ITM_KEYWORD <-
  ( + result :ITM_KEYWORD;
    result.make f;
    result
  );

  - keyword_empty    :ITM_KEYWORD := create 0;
  - keyword_strict   :ITM_KEYWORD := create flag_strict;
  - keyword_expanded :ITM_KEYWORD := create flag_expanded;

  - flag_strict   :INTEGER_8 := 0000_0001b;
  - flag_expanded :INTEGER_8 := 0000_0010b;

  - is_strict   :BOOLEAN <- (flags & flag_strict)   != 0;
  - is_expanded :BOOLEAN <- (flags & flag_expanded) != 0;

  - to_strict   :ITM_KEYWORD <- Self + flag_strict;
  - to_expanded :ITM_KEYWORD <- Self + flag_expanded;

  - to_not_strict   :ITM_KEYWORD <- Self - flag_strict;
  - to_not_expanded :ITM_KEYWORD <- Self - flag_expanded;

  - is_empty :BOOLEAN <- (flags = 0);

  + Self:SELF '+' flag:INTEGER_8 :ITM_KEYWORD <- create (flags |  flag);

  + Self:SELF '-' flag:INTEGER_8 :ITM_KEYWORD <- create (flags & ~flag);

  + Self:SELF '&' flag:INTEGER_8 :ITM_KEYWORD <- create (flags &  flag);

  - append_in buffer:STRING <-
  (
    is_strict.if {
      buffer.append (ALIAS_STR.keyword_strict);
    };
    is_expanded.if {
      is_strict.if { buffer.add_last ' '; };
      buffer.append (ALIAS_STR.keyword_expanded);
    };
  );

  - from_uinteger_8 i:UINTEGER_8 :ITM_KEYWORD <- create i;
  - to_uinteger_8 :UINTEGER_8 <- flags;
